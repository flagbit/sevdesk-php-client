<?php
/**
 * InvoiceApiTest
 * PHP version 5
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace flagbit\sevdesk\phpclient;

use \flagbit\sevdesk\phpclient\Configuration;
use \flagbit\sevdesk\phpclient\ApiClient;
use \flagbit\sevdesk\phpclient\ApiException;
use \flagbit\sevdesk\phpclient\ObjectSerializer;

/**
 * InvoiceApiTest Class Doc Comment
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for addInvoice
     *
     * Create a new invoice.
     *
     */
    public function testAddInvoice()
    {
    }

    /**
     * Test case for cancelInvoice
     *
     * Cancel an invoice.
     *
     */
    public function testCancelInvoice()
    {
    }

    /**
     * Test case for createInvoiceFromOrder
     *
     * Create an new invoice from an existing order.
     *
     */
    public function testCreateInvoiceFromOrder()
    {
    }

    /**
     * Test case for createInvoiceReminder
     *
     * Create an invoice reminder.
     *
     */
    public function testCreateInvoiceReminder()
    {
    }

    /**
     * Test case for deleteInvoice
     *
     * Delete an existing invoice.
     *
     */
    public function testDeleteInvoice()
    {
    }

    /**
     * Test case for duplicateInvoice
     *
     * Duplicate an existing invoice.
     *
     */
    public function testDuplicateInvoice()
    {
    }

    /**
     * Test case for getInvoiceAndReminderAmount
     *
     * Get amount of an invoice including reminders.
     *
     */
    public function testGetInvoiceAndReminderAmount()
    {
    }

    /**
     * Test case for getInvoiceAsPdf
     *
     * Get the invoice as a PDF.
     *
     */
    public function testGetInvoiceAsPdf()
    {
    }

    /**
     * Test case for getInvoiceReminderAmount
     *
     * Get (monetary) amount of all reminders of an invoice.
     *
     */
    public function testGetInvoiceReminderAmount()
    {
    }

    /**
     * Test case for getInvoices
     *
     * Get an overview of all invoices.
     *
     */
    public function testGetInvoices()
    {
    }

    /**
     * Test case for getNextInvoiceNumber
     *
     * Get the next invoice number.
     *
     */
    public function testGetNextInvoiceNumber()
    {
    }

    /**
     * Test case for invoiceAddPosition
     *
     * Add a position to an existing invoice.
     *
     */
    public function testInvoiceAddPosition()
    {
    }

    /**
     * Test case for invoiceBookAmount
     *
     * Book amount for an invoice.
     *
     */
    public function testInvoiceBookAmount()
    {
    }

    /**
     * Test case for invoiceCalcTotalDebit
     *
     * Calculate total sum of all invoices of current query.
     *
     */
    public function testInvoiceCalcTotalDebit()
    {
    }

    /**
     * Test case for invoiceCalculateDunningLevel
     *
     * Get dunning level of an invoice.
     *
     */
    public function testInvoiceCalculateDunningLevel()
    {
    }

    /**
     * Test case for invoiceChangeStatus
     *
     * Change status of an invoice.
     *
     */
    public function testInvoiceChangeStatus()
    {
    }

    /**
     * Test case for invoiceGetCancled
     *
     * Returns if an invoice is cancled.
     *
     */
    public function testInvoiceGetCancled()
    {
    }

    /**
     * Test case for invoiceGetCheckAccountTransactionLogs
     *
     * Get check account transaction logs about a specified invoice.
     *
     */
    public function testInvoiceGetCheckAccountTransactionLogs()
    {
    }

    /**
     * Test case for invoiceGetCheckAccountTransactions
     *
     * Get check account transactions of a specified invoice.
     *
     */
    public function testInvoiceGetCheckAccountTransactions()
    {
    }

    /**
     * Test case for invoiceGetDebit
     *
     * Get debit of an invoice.
     *
     */
    public function testInvoiceGetDebit()
    {
    }

    /**
     * Test case for invoiceGetDelinquent
     *
     * Get if an invoice is delinquent.
     *
     */
    public function testInvoiceGetDelinquent()
    {
    }

    /**
     * Test case for invoiceGetDiscounts
     *
     * Get the discounts of a specified invoice.
     *
     */
    public function testInvoiceGetDiscounts()
    {
    }

    /**
     * Test case for invoiceGetDocument
     *
     * Get document of an invoice.
     *
     */
    public function testInvoiceGetDocument()
    {
    }

    /**
     * Test case for invoiceGetDunnings
     *
     * Get invoice dunnings.
     *
     */
    public function testInvoiceGetDunnings()
    {
    }

    /**
     * Test case for invoiceGetFeed
     *
     * Get the feed of a specified invoice.
     *
     */
    public function testInvoiceGetFeed()
    {
    }

    /**
     * Test case for invoiceGetFinalInvoiceId
     *
     * Get final invoice id.
     *
     */
    public function testInvoiceGetFinalInvoiceId()
    {
    }

    /**
     * Test case for invoiceGetIsPartiallyPaid
     *
     * Returns if the invoice is partially payed.
     *
     */
    public function testInvoiceGetIsPartiallyPaid()
    {
    }

    /**
     * Test case for invoiceGetLastDunningDate
     *
     * Get last dunning date of invoice as timestamp.
     *
     */
    public function testInvoiceGetLastDunningDate()
    {
    }

    /**
     * Test case for invoiceGetPartialInvoices
     *
     * Get partial invoices of a specified invoice.
     *
     */
    public function testInvoiceGetPartialInvoices()
    {
    }

    /**
     * Test case for invoiceGetPositions
     *
     * Get the positions of a specified invoice.
     *
     */
    public function testInvoiceGetPositions()
    {
    }

    /**
     * Test case for invoiceGetRelatedObjects
     *
     * Get related objects of a specified invoice.
     *
     */
    public function testInvoiceGetRelatedObjects()
    {
    }

    /**
     * Test case for invoiceGetSwissEsr
     *
     * Get swiss esr.
     *
     */
    public function testInvoiceGetSwissEsr()
    {
    }

    /**
     * Test case for invoiceGetSwissEsrData
     *
     * Get swiss esr data.
     *
     */
    public function testInvoiceGetSwissEsrData()
    {
    }

    /**
     * Test case for invoiceGetTags
     *
     * Get the tags of a specified invoice.
     *
     */
    public function testInvoiceGetTags()
    {
    }

    /**
     * Test case for invoiceGetTax
     *
     * Get invoice tax amount in invoice currency.
     *
     */
    public function testInvoiceGetTax()
    {
    }

    /**
     * Test case for invoiceGetTaxGroups
     *
     * Get tax groups of invoice.
     *
     */
    public function testInvoiceGetTaxGroups()
    {
    }

    /**
     * Test case for invoiceGetTotal
     *
     * Get gross invoice amount in invoice currency.
     *
     */
    public function testInvoiceGetTotal()
    {
    }

    /**
     * Test case for invoiceGetTotalCalc
     *
     * Get total invoice amount in invoice currency.
     *
     */
    public function testInvoiceGetTotalCalc()
    {
    }

    /**
     * Test case for invoiceGetTotalNet
     *
     * Get total net invoice amount in invoice currency.
     *
     */
    public function testInvoiceGetTotalNet()
    {
    }

    /**
     * Test case for invoiceHasDiscounts
     *
     * Returns if the specified invoice has discounts.
     *
     */
    public function testInvoiceHasDiscounts()
    {
    }

    /**
     * Test case for invoiceIsOrigin
     *
     * Returns if the specified invoice is the origin of an order.
     *
     */
    public function testInvoiceIsOrigin()
    {
    }

    /**
     * Test case for invoiceMarkAsSent
     *
     * Marks an invoice as sent.
     *
     */
    public function testInvoiceMarkAsSent()
    {
    }

    /**
     * Test case for invoiceRefundAmount
     *
     * Refund an already payed invoice amount.
     *
     */
    public function testInvoiceRefundAmount()
    {
    }

    /**
     * Test case for invoiceRender
     *
     * Render invoice document on docserver and return metadata.
     *
     */
    public function testInvoiceRender()
    {
    }

    /**
     * Test case for invoiceSendBy
     *
     * Send invoice by desired method.
     *
     */
    public function testInvoiceSendBy()
    {
    }

    /**
     * Test case for saveInvoice
     *
     * Create a new invoice (with / without invoice positions and discounts).
     *
     */
    public function testSaveInvoice()
    {
    }

    /**
     * Test case for sendInvoiceViaEmail
     *
     * Send an invoice via Email.
     *
     */
    public function testSendInvoiceViaEmail()
    {
    }

    /**
     * Test case for sendInvoiceViaPost
     *
     * Send an invoice via Letter.
     *
     */
    public function testSendInvoiceViaPost()
    {
    }

    /**
     * Test case for updateInvoice
     *
     * Update an existing invoice.
     *
     */
    public function testUpdateInvoice()
    {
    }
}
