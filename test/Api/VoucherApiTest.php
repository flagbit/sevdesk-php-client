<?php
/**
 * VoucherApiTest
 * PHP version 5
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace flagbit\sevdesk\phpclient;

use \flagbit\sevdesk\phpclient\Configuration;
use \flagbit\sevdesk\phpclient\ApiClient;
use \flagbit\sevdesk\phpclient\ApiException;
use \flagbit\sevdesk\phpclient\ObjectSerializer;

/**
 * VoucherApiTest Class Doc Comment
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VoucherApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for addVoucher
     *
     * Create a new voucher.
     *
     */
    public function testAddVoucher()
    {
    }

    /**
     * Test case for deleteVoucher
     *
     * Delete an existing voucher.
     *
     */
    public function testDeleteVoucher()
    {
    }

    /**
     * Test case for getVouchers
     *
     * Get an overview of all vouchers.
     *
     */
    public function testGetVouchers()
    {
    }

    /**
     * Test case for saveVoucher
     *
     * Create a new voucher.
     *
     */
    public function testSaveVoucher()
    {
    }

    /**
     * Test case for updateVoucher
     *
     * Update an existing voucher.
     *
     */
    public function testUpdateVoucher()
    {
    }

    /**
     * Test case for voucherBookAmount
     *
     * Book an amount for a specified voucher.
     *
     */
    public function testVoucherBookAmount()
    {
    }

    /**
     * Test case for voucherChangeStatus
     *
     * Change status of a specified voucher.
     *
     */
    public function testVoucherChangeStatus()
    {
    }

    /**
     * Test case for voucherDeleteDocument
     *
     * Delete the document of an existing voucher.
     *
     */
    public function testVoucherDeleteDocument()
    {
    }

    /**
     * Test case for voucherExtractThumb
     *
     * Extract file thumb.
     *
     */
    public function testVoucherExtractThumb()
    {
    }

    /**
     * Test case for voucherGetAccountingTypes
     *
     * Get the accounting types of a specified voucher.
     *
     */
    public function testVoucherGetAccountingTypes()
    {
    }

    /**
     * Test case for voucherGetCheckAccountTransactionLogs
     *
     * Get the check account transaction logs of a specified voucher.
     *
     */
    public function testVoucherGetCheckAccountTransactionLogs()
    {
    }

    /**
     * Test case for voucherGetCheckAccountTransactions
     *
     * Get the check account transactions of a specified voucher.
     *
     */
    public function testVoucherGetCheckAccountTransactions()
    {
    }

    /**
     * Test case for voucherGetCurrency
     *
     * Get the currency of a specified voucher.
     *
     */
    public function testVoucherGetCurrency()
    {
    }

    /**
     * Test case for voucherGetDebit
     *
     * Get unpaid amount of a specified voucher.
     *
     */
    public function testVoucherGetDebit()
    {
    }

    /**
     * Test case for voucherGetDelinquent
     *
     * Return if the voucher is delinquent.
     *
     */
    public function testVoucherGetDelinquent()
    {
    }

    /**
     * Test case for voucherGetDependingRecurringVouchers
     *
     * Get the depending recurring vouchers of a specified origin voucher.
     *
     */
    public function testVoucherGetDependingRecurringVouchers()
    {
    }

    /**
     * Test case for voucherGetDocumentImage
     *
     * Returns the base64 encoded preview content of the vouchers document.
     *
     */
    public function testVoucherGetDocumentImage()
    {
    }

    /**
     * Test case for voucherGetTaxGroups
     *
     * Get an overview of all vouchers.
     *
     */
    public function testVoucherGetTaxGroups()
    {
    }

    /**
     * Test case for voucherMarkAsOpen
     *
     * Mark a specified voucher as open.
     *
     */
    public function testVoucherMarkAsOpen()
    {
    }

    /**
     * Test case for voucherMarkAsPaid
     *
     * Mark a specified voucher as paid.
     *
     */
    public function testVoucherMarkAsPaid()
    {
    }

    /**
     * Test case for voucherRefundAmount
     *
     * Refund an amount for a specified voucher.
     *
     */
    public function testVoucherRefundAmount()
    {
    }

    /**
     * Test case for voucherUploadTempFile
     *
     * Upload a temporary file to be used later.
     *
     */
    public function testVoucherUploadTempFile()
    {
    }
}
