<?php
/**
 * ExportApi
 * PHP version 5
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace flagbit\sevdesk\phpclient\Api;

use \flagbit\sevdesk\phpclient\ApiClient;
use \flagbit\sevdesk\phpclient\ApiException;
use \flagbit\sevdesk\phpclient\Configuration;
use \flagbit\sevdesk\phpclient\ObjectSerializer;

/**
 * ExportApi Class Doc Comment
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExportApi
{
    /**
     * API Client
     *
     * @var \flagbit\sevdesk\phpclient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \flagbit\sevdesk\phpclient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\flagbit\sevdesk\phpclient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \flagbit\sevdesk\phpclient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \flagbit\sevdesk\phpclient\ApiClient $apiClient set the API client
     *
     * @return ExportApi
     */
    public function setApiClient(\flagbit\sevdesk\phpclient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation exportContactCsv
     *
     * Export the specified contact as csv
     *
     * @param int $contact_id Id of the contact you want to export (required)
     * @param string $contact_object_name Model name which is exported (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function exportContactCsv($contact_id, $contact_object_name, $download = 'true')
    {
        list($response) = $this->exportContactCsvWithHttpInfo($contact_id, $contact_object_name, $download);
        return $response;
    }

    /**
     * Operation exportContactCsvWithHttpInfo
     *
     * Export the specified contact as csv
     *
     * @param int $contact_id Id of the contact you want to export (required)
     * @param string $contact_object_name Model name which is exported (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportContactCsvWithHttpInfo($contact_id, $contact_object_name, $download = 'true')
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_id when calling exportContactCsv');
        }
        // verify the required parameter 'contact_object_name' is set
        if ($contact_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_object_name when calling exportContactCsv');
        }
        // parse inputs
        $resourcePath = "/Export/contactCsv";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($contact_id !== null) {
            $queryParams['contact[id]'] = $this->apiClient->getSerializer()->toQueryValue($contact_id);
        }
        // query params
        if ($contact_object_name !== null) {
            $queryParams['contact[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($contact_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Export/contactCsv'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportContactListCsv
     *
     * Export the contact list as csv
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported contacts (optional, default to 99999)
     * @param bool $sev_query_filter_depth Specify if companies and persons (true) or only persons (false) should be exported (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function exportContactListCsv($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_depth = 'true')
    {
        list($response) = $this->exportContactListCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_depth);
        return $response;
    }

    /**
     * Operation exportContactListCsvWithHttpInfo
     *
     * Export the contact list as csv
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported contacts (optional, default to 99999)
     * @param bool $sev_query_filter_depth Specify if companies and persons (true) or only persons (false) should be exported (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportContactListCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_depth = 'true')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling exportContactListCsv');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling exportContactListCsv');
        }
        // parse inputs
        $resourcePath = "/Export/contactListCsv";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_filter_depth !== null) {
            $queryParams['sevQuery[filter][depth]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_filter_depth);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Export/contactListCsv'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportDatev
     *
     * Datev export as zip with csv´s
     *
     * @param string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param string $start Specify the start date for the datev export (required)
     * @param string $end Specify the end date for the datev export (required)
     * @param bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param bool $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function exportDatev($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        list($response) = $this->exportDatevWithHttpInfo($scope, $start, $end, $with_enshrined, $enshrine, $download);
        return $response;
    }

    /**
     * Operation exportDatevWithHttpInfo
     *
     * Datev export as zip with csv´s
     *
     * @param string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param string $start Specify the start date for the datev export (required)
     * @param string $end Specify the end date for the datev export (required)
     * @param bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param bool $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportDatevWithHttpInfo($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        // verify the required parameter 'scope' is set
        if ($scope === null) {
            throw new \InvalidArgumentException('Missing the required parameter $scope when calling exportDatev');
        }
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling exportDatev');
        }
        // verify the required parameter 'end' is set
        if ($end === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end when calling exportDatev');
        }
        // verify the required parameter 'with_enshrined' is set
        if ($with_enshrined === null) {
            throw new \InvalidArgumentException('Missing the required parameter $with_enshrined when calling exportDatev');
        }
        // verify the required parameter 'enshrine' is set
        if ($enshrine === null) {
            throw new \InvalidArgumentException('Missing the required parameter $enshrine when calling exportDatev');
        }
        // parse inputs
        $resourcePath = "/Export/datev";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/zip']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = $this->apiClient->getSerializer()->toQueryValue($scope);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // query params
        if ($with_enshrined !== null) {
            $queryParams['withEnshrined'] = $this->apiClient->getSerializer()->toQueryValue($with_enshrined);
        }
        // query params
        if ($enshrine !== null) {
            $queryParams['enshrine'] = $this->apiClient->getSerializer()->toQueryValue($enshrine);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Export/datev'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportDatevZip
     *
     * Export zip for voucher upload
     *
     * @param string $scope Define what you want to include in the zip export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param string $start Specify the start date for the zip export (required)
     * @param string $end Specify the end date for the zip export (required)
     * @param bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function exportDatevZip($scope, $start, $end, $with_enshrined, $download = 'true')
    {
        list($response) = $this->exportDatevZipWithHttpInfo($scope, $start, $end, $with_enshrined, $download);
        return $response;
    }

    /**
     * Operation exportDatevZipWithHttpInfo
     *
     * Export zip for voucher upload
     *
     * @param string $scope Define what you want to include in the zip export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param string $start Specify the start date for the zip export (required)
     * @param string $end Specify the end date for the zip export (required)
     * @param bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportDatevZipWithHttpInfo($scope, $start, $end, $with_enshrined, $download = 'true')
    {
        // verify the required parameter 'scope' is set
        if ($scope === null) {
            throw new \InvalidArgumentException('Missing the required parameter $scope when calling exportDatevZip');
        }
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling exportDatevZip');
        }
        // verify the required parameter 'end' is set
        if ($end === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end when calling exportDatevZip');
        }
        // verify the required parameter 'with_enshrined' is set
        if ($with_enshrined === null) {
            throw new \InvalidArgumentException('Missing the required parameter $with_enshrined when calling exportDatevZip');
        }
        // parse inputs
        $resourcePath = "/Export/datevZip";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/zip']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = $this->apiClient->getSerializer()->toQueryValue($scope);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // query params
        if ($with_enshrined !== null) {
            $queryParams['withEnshrined'] = $this->apiClient->getSerializer()->toQueryValue($with_enshrined);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Export/datevZip'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportInventoryPartLogList
     *
     * Export the inventory part log as csv
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported part log (optional, default to 99999)
     * @param int $sev_query_filter_part_id Id of the part for which you want to export the part log (optional)
     * @param string $sev_query_filter_part_object_name Object name of part (optional, default to Part)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function exportInventoryPartLogList($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_part_id = null, $sev_query_filter_part_object_name = 'Part')
    {
        list($response) = $this->exportInventoryPartLogListWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_part_id, $sev_query_filter_part_object_name);
        return $response;
    }

    /**
     * Operation exportInventoryPartLogListWithHttpInfo
     *
     * Export the inventory part log as csv
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported part log (optional, default to 99999)
     * @param int $sev_query_filter_part_id Id of the part for which you want to export the part log (optional)
     * @param string $sev_query_filter_part_object_name Object name of part (optional, default to Part)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportInventoryPartLogListWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_part_id = null, $sev_query_filter_part_object_name = 'Part')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling exportInventoryPartLogList');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling exportInventoryPartLogList');
        }
        // parse inputs
        $resourcePath = "/Export/inventoryPartLogListCsv";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_filter_part_id !== null) {
            $queryParams['sevQuery[filter][part][id]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_filter_part_id);
        }
        // query params
        if ($sev_query_filter_part_object_name !== null) {
            $queryParams['sevQuery[filter][part][objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_filter_part_object_name);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Export/inventoryPartLogListCsv'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportInvoiceCsv
     *
     * Export the invoice list as csv
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported invoices (optional, default to 99999)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function exportInvoiceCsv($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        list($response) = $this->exportInvoiceCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit);
        return $response;
    }

    /**
     * Operation exportInvoiceCsvWithHttpInfo
     *
     * Export the invoice list as csv
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported invoices (optional, default to 99999)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportInvoiceCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling exportInvoiceCsv');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling exportInvoiceCsv');
        }
        // parse inputs
        $resourcePath = "/Export/invoiceCsv";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Export/invoiceCsv'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportInvoiceZip
     *
     * Export the invoice list as zip with csv´s
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported invoices (optional, default to 50)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function exportInvoiceZip($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '50')
    {
        list($response) = $this->exportInvoiceZipWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit);
        return $response;
    }

    /**
     * Operation exportInvoiceZipWithHttpInfo
     *
     * Export the invoice list as zip with csv´s
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported invoices (optional, default to 50)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportInvoiceZipWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '50')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling exportInvoiceZip');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling exportInvoiceZip');
        }
        // parse inputs
        $resourcePath = "/Export/invoiceZip";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/zip']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Export/invoiceZip'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportPartCsv
     *
     * Export the parts as csv
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported part (optional, default to 99999)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function exportPartCsv($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        list($response) = $this->exportPartCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit);
        return $response;
    }

    /**
     * Operation exportPartCsvWithHttpInfo
     *
     * Export the parts as csv
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported part (optional, default to 99999)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportPartCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling exportPartCsv');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling exportPartCsv');
        }
        // parse inputs
        $resourcePath = "/Export/partCsv";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Export/partCsv'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportPebe
     *
     * Pebe export as zip with csv´s
     *
     * @param string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param string $start Specify the start date for the pebe export (required)
     * @param string $end Specify the end date for the pebe export (required)
     * @param bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param bool $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function exportPebe($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        list($response) = $this->exportPebeWithHttpInfo($scope, $start, $end, $with_enshrined, $enshrine, $download);
        return $response;
    }

    /**
     * Operation exportPebeWithHttpInfo
     *
     * Pebe export as zip with csv´s
     *
     * @param string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param string $start Specify the start date for the pebe export (required)
     * @param string $end Specify the end date for the pebe export (required)
     * @param bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param bool $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportPebeWithHttpInfo($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        // verify the required parameter 'scope' is set
        if ($scope === null) {
            throw new \InvalidArgumentException('Missing the required parameter $scope when calling exportPebe');
        }
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling exportPebe');
        }
        // verify the required parameter 'end' is set
        if ($end === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end when calling exportPebe');
        }
        // verify the required parameter 'with_enshrined' is set
        if ($with_enshrined === null) {
            throw new \InvalidArgumentException('Missing the required parameter $with_enshrined when calling exportPebe');
        }
        // verify the required parameter 'enshrine' is set
        if ($enshrine === null) {
            throw new \InvalidArgumentException('Missing the required parameter $enshrine when calling exportPebe');
        }
        // parse inputs
        $resourcePath = "/Export/pebe";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/zip']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = $this->apiClient->getSerializer()->toQueryValue($scope);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // query params
        if ($with_enshrined !== null) {
            $queryParams['withEnshrined'] = $this->apiClient->getSerializer()->toQueryValue($with_enshrined);
        }
        // query params
        if ($enshrine !== null) {
            $queryParams['enshrine'] = $this->apiClient->getSerializer()->toQueryValue($enshrine);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Export/pebe'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportTransactionsCsv
     *
     * Export the transactions as csv
     *
     * @param bool $sev_query_filter_register Specifies if the register is included (required)
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param string $sev_query_order_entry_date Order in which you want to have the transactions listed (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $check_account_id Specify check account for which you want the transactions. Otherwise all transactions will be used (optional)
     * @param string $check_account_object_name Check account model name (optional, default to CheckAccount)
     * @param int $sev_query_limit Limit exported transactions (optional, default to 99999)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function exportTransactionsCsv($sev_query_filter_register, $sev_query_model_name, $sev_query_object_name, $sev_query_order_entry_date, $download = 'true', $check_account_id = null, $check_account_object_name = 'CheckAccount', $sev_query_limit = '99999')
    {
        list($response) = $this->exportTransactionsCsvWithHttpInfo($sev_query_filter_register, $sev_query_model_name, $sev_query_object_name, $sev_query_order_entry_date, $download, $check_account_id, $check_account_object_name, $sev_query_limit);
        return $response;
    }

    /**
     * Operation exportTransactionsCsvWithHttpInfo
     *
     * Export the transactions as csv
     *
     * @param bool $sev_query_filter_register Specifies if the register is included (required)
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param string $sev_query_order_entry_date Order in which you want to have the transactions listed (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $check_account_id Specify check account for which you want the transactions. Otherwise all transactions will be used (optional)
     * @param string $check_account_object_name Check account model name (optional, default to CheckAccount)
     * @param int $sev_query_limit Limit exported transactions (optional, default to 99999)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportTransactionsCsvWithHttpInfo($sev_query_filter_register, $sev_query_model_name, $sev_query_object_name, $sev_query_order_entry_date, $download = 'true', $check_account_id = null, $check_account_object_name = 'CheckAccount', $sev_query_limit = '99999')
    {
        // verify the required parameter 'sev_query_filter_register' is set
        if ($sev_query_filter_register === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_filter_register when calling exportTransactionsCsv');
        }
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling exportTransactionsCsv');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling exportTransactionsCsv');
        }
        // verify the required parameter 'sev_query_order_entry_date' is set
        if ($sev_query_order_entry_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_order_entry_date when calling exportTransactionsCsv');
        }
        // parse inputs
        $resourcePath = "/Export/transactionsCsv";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($check_account_id !== null) {
            $queryParams['checkAccount[id]'] = $this->apiClient->getSerializer()->toQueryValue($check_account_id);
        }
        // query params
        if ($check_account_object_name !== null) {
            $queryParams['checkAccount[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($check_account_object_name);
        }
        // query params
        if ($sev_query_filter_register !== null) {
            $queryParams['sevQuery[filter][register]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_filter_register);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }
        // query params
        if ($sev_query_order_entry_date !== null) {
            $queryParams['sevQuery[order][entryDate]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_order_entry_date);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Export/transactionsCsv'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportVoucherListCsv
     *
     * Export the voucher list as csv
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function exportVoucherListCsv($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        list($response) = $this->exportVoucherListCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_start_date, $sev_query_filter_voucher_type);
        return $response;
    }

    /**
     * Operation exportVoucherListCsvWithHttpInfo
     *
     * Export the voucher list as csv
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportVoucherListCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling exportVoucherListCsv');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling exportVoucherListCsv');
        }
        // parse inputs
        $resourcePath = "/Export/voucherListCsv";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_filter_start_date !== null) {
            $queryParams['sevQuery[filter][startDate]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_filter_start_date);
        }
        // query params
        if ($sev_query_filter_voucher_type !== null) {
            $queryParams['sevQuery[filter][voucherType]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_filter_voucher_type);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Export/voucherListCsv'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportVoucherZip
     *
     * Export the voucher list as zip with csv´s
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function exportVoucherZip($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        list($response) = $this->exportVoucherZipWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_start_date, $sev_query_filter_voucher_type);
        return $response;
    }

    /**
     * Operation exportVoucherZipWithHttpInfo
     *
     * Export the voucher list as zip with csv´s
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportVoucherZipWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling exportVoucherZip');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling exportVoucherZip');
        }
        // parse inputs
        $resourcePath = "/Export/voucherZip";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/zip']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_filter_start_date !== null) {
            $queryParams['sevQuery[filter][startDate]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_filter_start_date);
        }
        // query params
        if ($sev_query_filter_voucher_type !== null) {
            $queryParams['sevQuery[filter][voucherType]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_filter_voucher_type);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Export/voucherZip'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
