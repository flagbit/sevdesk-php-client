<?php
/**
 * VoucherApi
 * PHP version 5
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace flagbit\sevdesk\phpclient\Api;

use \flagbit\sevdesk\phpclient\ApiClient;
use \flagbit\sevdesk\phpclient\ApiException;
use \flagbit\sevdesk\phpclient\Configuration;
use \flagbit\sevdesk\phpclient\ObjectSerializer;

/**
 * VoucherApi Class Doc Comment
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VoucherApi
{
    /**
     * API Client
     *
     * @var \flagbit\sevdesk\phpclient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \flagbit\sevdesk\phpclient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\flagbit\sevdesk\phpclient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \flagbit\sevdesk\phpclient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \flagbit\sevdesk\phpclient\ApiClient $apiClient set the API client
     *
     * @return VoucherApi
     */
    public function setApiClient(\flagbit\sevdesk\phpclient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addVoucher
     *
     * Create a new voucher
     *
     * @param string $body To create a voucher, simply enter desired values after parameter&#x3D; and remove the quotation marks.      Be aware that you can&#39;t use all the parameters included in the Model_Voucher, as creating a voucher involves other functions.      So for example, adding a sumNet/Gross/etc. does not work as they normally get their value from the product which is involved in the voucher      The product/part in this case is handled in the Model_VoucherPos which makes a call to Model_Part. (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelVoucher
     */
    public function addVoucher($body)
    {
        list($response) = $this->addVoucherWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addVoucherWithHttpInfo
     *
     * Create a new voucher
     *
     * @param string $body To create a voucher, simply enter desired values after parameter&#x3D; and remove the quotation marks.      Be aware that you can&#39;t use all the parameters included in the Model_Voucher, as creating a voucher involves other functions.      So for example, adding a sumNet/Gross/etc. does not work as they normally get their value from the product which is involved in the voucher      The product/part in this case is handled in the Model_VoucherPos which makes a call to Model_Part. (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelVoucher, HTTP status code, HTTP response headers (array of strings)
     */
    public function addVoucherWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addVoucher');
        }
        // parse inputs
        $resourcePath = "/Voucher";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelVoucher',
                '/Voucher'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelVoucher', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelVoucher', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteVoucher
     *
     * Delete an existing voucher
     *
     * @param int $id Id of voucher you want to delete (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function deleteVoucher($id)
    {
        list($response) = $this->deleteVoucherWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteVoucherWithHttpInfo
     *
     * Delete an existing voucher
     *
     * @param int $id Id of voucher you want to delete (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVoucherWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteVoucher');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Voucher/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getVouchers
     *
     * Get an overview of all vouchers
     *
     * @param int $limit Limits the number of entries returned. Default is 100 (optional, default to 100)
     * @param int $offset Set the index where the returned vouchers start. Default is 0 (optional, default to 0)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelVoucher
     */
    public function getVouchers($limit = '100', $offset = '0', $embed = null)
    {
        list($response) = $this->getVouchersWithHttpInfo($limit, $offset, $embed);
        return $response;
    }

    /**
     * Operation getVouchersWithHttpInfo
     *
     * Get an overview of all vouchers
     *
     * @param int $limit Limits the number of entries returned. Default is 100 (optional, default to 100)
     * @param int $offset Set the index where the returned vouchers start. Default is 0 (optional, default to 0)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelVoucher, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVouchersWithHttpInfo($limit = '100', $offset = '0', $embed = null)
    {
        // parse inputs
        $resourcePath = "/Voucher";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if (is_array($embed)) {
            $embed = $this->apiClient->getSerializer()->serializeCollection($embed, 'csv', true);
        }
        if ($embed !== null) {
            $queryParams['embed'] = $this->apiClient->getSerializer()->toQueryValue($embed);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelVoucher',
                '/Voucher'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelVoucher', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelVoucher', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation saveVoucher
     *
     * Create a new voucher
     *
     * @param string $body The saveVoucher function in Voucher/Factory.php combines both Voucher and VoucherPos with all their HTTP-methods.    It is now possible to **simultaneously** create a voucher with its position.    To simply (only) create a voucher you can use the given parameters and concatenate your values.    For also adding a voucher position refer to the **quick reference** below.    The parameters you find there are **needed** for creating a voucher position. Just concatenate them to the existing voucher parameters.    You can also find additional (optional) parameters in the **Models** section.    Quick reference:  * &amp;voucherPosSave[0][accountingType][id]&#x3D;  * &amp;voucherPosSave[0][accountingType][objectName]&#x3D;AccountingType  * &amp;voucherPosSave[0][taxRate]&#x3D;19  * &amp;voucherPosSave[0][sum]&#x3D;  * &amp;voucherPosSave[0][objectName]&#x3D;VoucherPos  * &amp;voucherPosSave[0][mapAll]&#x3D;true  * &amp;voucherPosDelete&#x3D;true/false &lt;-- if you provide this parameter, you can delete a voucher position    You can also use additional parameters for creating a voucher in the same way by adding them in the format: **voucher[yourParameter]** (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelVoucherFactory
     */
    public function saveVoucher($body)
    {
        list($response) = $this->saveVoucherWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation saveVoucherWithHttpInfo
     *
     * Create a new voucher
     *
     * @param string $body The saveVoucher function in Voucher/Factory.php combines both Voucher and VoucherPos with all their HTTP-methods.    It is now possible to **simultaneously** create a voucher with its position.    To simply (only) create a voucher you can use the given parameters and concatenate your values.    For also adding a voucher position refer to the **quick reference** below.    The parameters you find there are **needed** for creating a voucher position. Just concatenate them to the existing voucher parameters.    You can also find additional (optional) parameters in the **Models** section.    Quick reference:  * &amp;voucherPosSave[0][accountingType][id]&#x3D;  * &amp;voucherPosSave[0][accountingType][objectName]&#x3D;AccountingType  * &amp;voucherPosSave[0][taxRate]&#x3D;19  * &amp;voucherPosSave[0][sum]&#x3D;  * &amp;voucherPosSave[0][objectName]&#x3D;VoucherPos  * &amp;voucherPosSave[0][mapAll]&#x3D;true  * &amp;voucherPosDelete&#x3D;true/false &lt;-- if you provide this parameter, you can delete a voucher position    You can also use additional parameters for creating a voucher in the same way by adding them in the format: **voucher[yourParameter]** (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelVoucherFactory, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveVoucherWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling saveVoucher');
        }
        // parse inputs
        $resourcePath = "/Voucher/Factory/saveVoucher";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelVoucherFactory',
                '/Voucher/Factory/saveVoucher'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelVoucherFactory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelVoucherFactory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateVoucher
     *
     * Update an existing voucher
     *
     * @param int $id Id of the voucher you want to update (required)
     * @param string $body Parameters which need to be updated. Please refer to the description from create invoice.      Enter the parameters according to the syntax: parameter1&#x3D;&amp;parameter2&#x3D; and remove the quotation marks (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelVoucher
     */
    public function updateVoucher($id, $body = null)
    {
        list($response) = $this->updateVoucherWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateVoucherWithHttpInfo
     *
     * Update an existing voucher
     *
     * @param int $id Id of the voucher you want to update (required)
     * @param string $body Parameters which need to be updated. Please refer to the description from create invoice.      Enter the parameters according to the syntax: parameter1&#x3D;&amp;parameter2&#x3D; and remove the quotation marks (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelVoucher, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVoucherWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateVoucher');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelVoucher',
                '/Voucher/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelVoucher', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelVoucher', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation voucherBookAmount
     *
     * Book an amount for a specified voucher
     *
     * @param int $id Id of the voucher for which you want to book an amount (required)
     * @param string $body To book an amount for your voucher, simply enter desired values after parameter&#x3D; and remove the quotation marks. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function voucherBookAmount($id, $body = null)
    {
        list($response) = $this->voucherBookAmountWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation voucherBookAmountWithHttpInfo
     *
     * Book an amount for a specified voucher
     *
     * @param int $id Id of the voucher for which you want to book an amount (required)
     * @param string $body To book an amount for your voucher, simply enter desired values after parameter&#x3D; and remove the quotation marks. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherBookAmountWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherBookAmount');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/bookAmmount";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Voucher/{id}/bookAmmount'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation voucherChangeStatus
     *
     * Change status of a specified voucher
     *
     * @param int $id Id of the voucher of which you want to change the status (required)
     * @param string $body To change the status of your voucher, simply enter desired values after parameter&#x3D; and remove the quotation marks. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function voucherChangeStatus($id, $body = null)
    {
        list($response) = $this->voucherChangeStatusWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation voucherChangeStatusWithHttpInfo
     *
     * Change status of a specified voucher
     *
     * @param int $id Id of the voucher of which you want to change the status (required)
     * @param string $body To change the status of your voucher, simply enter desired values after parameter&#x3D; and remove the quotation marks. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherChangeStatusWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherChangeStatus');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/changeStatus";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Voucher/{id}/changeStatus'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation voucherDeleteDocument
     *
     * Delete the document of an existing voucher
     *
     * @param int $id Id of the voucher of which you want to delete the document (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function voucherDeleteDocument($id)
    {
        list($response) = $this->voucherDeleteDocumentWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation voucherDeleteDocumentWithHttpInfo
     *
     * Delete the document of an existing voucher
     *
     * @param int $id Id of the voucher of which you want to delete the document (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherDeleteDocumentWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherDeleteDocument');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/deleteDocument";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Voucher/{id}/deleteDocument'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation voucherExtractThumb
     *
     * Extract file thumb
     *
     * @param string $file_name Name of the file of which you want to extract the thumb (optional, default to )
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function voucherExtractThumb($file_name = '')
    {
        list($response) = $this->voucherExtractThumbWithHttpInfo($file_name);
        return $response;
    }

    /**
     * Operation voucherExtractThumbWithHttpInfo
     *
     * Extract file thumb
     *
     * @param string $file_name Name of the file of which you want to extract the thumb (optional, default to )
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherExtractThumbWithHttpInfo($file_name = '')
    {
        // parse inputs
        $resourcePath = "/Voucher/Factory/extractThumb";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = $this->apiClient->getSerializer()->toQueryValue($file_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Voucher/Factory/extractThumb'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation voucherGetAccountingTypes
     *
     * Get the accounting types of a specified voucher
     *
     * @param int $id Id of the voucher of which you want to get the accounting types (required)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelAccountingType
     */
    public function voucherGetAccountingTypes($id, $embed = null)
    {
        list($response) = $this->voucherGetAccountingTypesWithHttpInfo($id, $embed);
        return $response;
    }

    /**
     * Operation voucherGetAccountingTypesWithHttpInfo
     *
     * Get the accounting types of a specified voucher
     *
     * @param int $id Id of the voucher of which you want to get the accounting types (required)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelAccountingType, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherGetAccountingTypesWithHttpInfo($id, $embed = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherGetAccountingTypes');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/getAccountingTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if (is_array($embed)) {
            $embed = $this->apiClient->getSerializer()->serializeCollection($embed, 'csv', true);
        }
        if ($embed !== null) {
            $queryParams['embed'] = $this->apiClient->getSerializer()->toQueryValue($embed);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelAccountingType',
                '/Voucher/{id}/getAccountingTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelAccountingType', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelAccountingType', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation voucherGetCheckAccountTransactionLogs
     *
     * Get the check account transaction logs of a specified voucher
     *
     * @param int $id Id of the voucher of which you want to get the check account transaction logs (required)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function voucherGetCheckAccountTransactionLogs($id, $embed = null)
    {
        list($response) = $this->voucherGetCheckAccountTransactionLogsWithHttpInfo($id, $embed);
        return $response;
    }

    /**
     * Operation voucherGetCheckAccountTransactionLogsWithHttpInfo
     *
     * Get the check account transaction logs of a specified voucher
     *
     * @param int $id Id of the voucher of which you want to get the check account transaction logs (required)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherGetCheckAccountTransactionLogsWithHttpInfo($id, $embed = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherGetCheckAccountTransactionLogs');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/getCheckAccountTransactionLogs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if (is_array($embed)) {
            $embed = $this->apiClient->getSerializer()->serializeCollection($embed, 'csv', true);
        }
        if ($embed !== null) {
            $queryParams['embed'] = $this->apiClient->getSerializer()->toQueryValue($embed);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Voucher/{id}/getCheckAccountTransactionLogs'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation voucherGetCheckAccountTransactions
     *
     * Get the check account transactions of a specified voucher
     *
     * @param int $id Id of the voucher of which you want to get the check account transactions (required)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function voucherGetCheckAccountTransactions($id, $embed = null)
    {
        list($response) = $this->voucherGetCheckAccountTransactionsWithHttpInfo($id, $embed);
        return $response;
    }

    /**
     * Operation voucherGetCheckAccountTransactionsWithHttpInfo
     *
     * Get the check account transactions of a specified voucher
     *
     * @param int $id Id of the voucher of which you want to get the check account transactions (required)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherGetCheckAccountTransactionsWithHttpInfo($id, $embed = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherGetCheckAccountTransactions');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/getCheckAccountTransactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if (is_array($embed)) {
            $embed = $this->apiClient->getSerializer()->serializeCollection($embed, 'csv', true);
        }
        if ($embed !== null) {
            $queryParams['embed'] = $this->apiClient->getSerializer()->toQueryValue($embed);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Voucher/{id}/getCheckAccountTransactions'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation voucherGetCurrency
     *
     * Get the currency of a specified voucher
     *
     * @param int $id Id of the voucher of which you want to get the currency (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function voucherGetCurrency($id)
    {
        list($response) = $this->voucherGetCurrencyWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation voucherGetCurrencyWithHttpInfo
     *
     * Get the currency of a specified voucher
     *
     * @param int $id Id of the voucher of which you want to get the currency (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherGetCurrencyWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherGetCurrency');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/getCurrency";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Voucher/{id}/getCurrency'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation voucherGetDebit
     *
     * Get unpaid amount of a specified voucher
     *
     * @param int $id Id of the voucher of which you want to get the unpaid amount (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function voucherGetDebit($id)
    {
        list($response) = $this->voucherGetDebitWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation voucherGetDebitWithHttpInfo
     *
     * Get unpaid amount of a specified voucher
     *
     * @param int $id Id of the voucher of which you want to get the unpaid amount (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherGetDebitWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherGetDebit');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/getDebit";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Voucher/{id}/getDebit'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation voucherGetDelinquent
     *
     * Return if the voucher is delinquent
     *
     * @param int $id Id of the voucher of which you want to know if it is delinquent (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function voucherGetDelinquent($id)
    {
        list($response) = $this->voucherGetDelinquentWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation voucherGetDelinquentWithHttpInfo
     *
     * Return if the voucher is delinquent
     *
     * @param int $id Id of the voucher of which you want to know if it is delinquent (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherGetDelinquentWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherGetDelinquent');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/getDelinquent";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Voucher/{id}/getDelinquent'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation voucherGetDependingRecurringVouchers
     *
     * Get the depending recurring vouchers of a specified origin voucher
     *
     * @param int $id Id of the voucher of which you want to get the depending recurring vouchers (required)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelVoucher
     */
    public function voucherGetDependingRecurringVouchers($id, $embed = null)
    {
        list($response) = $this->voucherGetDependingRecurringVouchersWithHttpInfo($id, $embed);
        return $response;
    }

    /**
     * Operation voucherGetDependingRecurringVouchersWithHttpInfo
     *
     * Get the depending recurring vouchers of a specified origin voucher
     *
     * @param int $id Id of the voucher of which you want to get the depending recurring vouchers (required)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelVoucher, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherGetDependingRecurringVouchersWithHttpInfo($id, $embed = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherGetDependingRecurringVouchers');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/getDependingRecurringVouchers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if (is_array($embed)) {
            $embed = $this->apiClient->getSerializer()->serializeCollection($embed, 'csv', true);
        }
        if ($embed !== null) {
            $queryParams['embed'] = $this->apiClient->getSerializer()->toQueryValue($embed);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelVoucher',
                '/Voucher/{id}/getDependingRecurringVouchers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelVoucher', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelVoucher', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation voucherGetDocumentImage
     *
     * Returns the base64 encoded preview content of the vouchers document
     *
     * @param int $id Id of the voucher of which you want to get the document image (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function voucherGetDocumentImage($id)
    {
        list($response) = $this->voucherGetDocumentImageWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation voucherGetDocumentImageWithHttpInfo
     *
     * Returns the base64 encoded preview content of the vouchers document
     *
     * @param int $id Id of the voucher of which you want to get the document image (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherGetDocumentImageWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherGetDocumentImage');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/getDocumentImage";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Voucher/{id}/getDocumentImage'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation voucherGetTaxGroups
     *
     * Get an overview of all vouchers
     *
     * @param int $id Id of the voucher you want to update (required)
     * @param bool $show_total_sum Define if you want to have the total sum of each tax group (required)
     * @param bool $with_corrections Define if you want to have the total sum with corrections (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function voucherGetTaxGroups($id, $show_total_sum, $with_corrections)
    {
        list($response) = $this->voucherGetTaxGroupsWithHttpInfo($id, $show_total_sum, $with_corrections);
        return $response;
    }

    /**
     * Operation voucherGetTaxGroupsWithHttpInfo
     *
     * Get an overview of all vouchers
     *
     * @param int $id Id of the voucher you want to update (required)
     * @param bool $show_total_sum Define if you want to have the total sum of each tax group (required)
     * @param bool $with_corrections Define if you want to have the total sum with corrections (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherGetTaxGroupsWithHttpInfo($id, $show_total_sum, $with_corrections)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherGetTaxGroups');
        }
        // verify the required parameter 'show_total_sum' is set
        if ($show_total_sum === null) {
            throw new \InvalidArgumentException('Missing the required parameter $show_total_sum when calling voucherGetTaxGroups');
        }
        // verify the required parameter 'with_corrections' is set
        if ($with_corrections === null) {
            throw new \InvalidArgumentException('Missing the required parameter $with_corrections when calling voucherGetTaxGroups');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/getTaxGroupes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($show_total_sum !== null) {
            $queryParams['showTotalSum'] = $this->apiClient->getSerializer()->toQueryValue($show_total_sum);
        }
        // query params
        if ($with_corrections !== null) {
            $queryParams['withCorrections'] = $this->apiClient->getSerializer()->toQueryValue($with_corrections);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Voucher/{id}/getTaxGroupes'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation voucherMarkAsOpen
     *
     * Mark a specified voucher as open
     *
     * @param int $id Id of the voucher you want to mark as open (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelVoucher
     */
    public function voucherMarkAsOpen($id)
    {
        list($response) = $this->voucherMarkAsOpenWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation voucherMarkAsOpenWithHttpInfo
     *
     * Mark a specified voucher as open
     *
     * @param int $id Id of the voucher you want to mark as open (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelVoucher, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherMarkAsOpenWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherMarkAsOpen');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/markAsOpen";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelVoucher',
                '/Voucher/{id}/markAsOpen'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelVoucher', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelVoucher', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation voucherMarkAsPaid
     *
     * Mark a specified voucher as paid
     *
     * @param int $id Id of the voucher you want to mark as paid (required)
     * @param string $body Enter the date the voucher was paid here, using the format DD.MM.YYYY! (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelVoucher
     */
    public function voucherMarkAsPaid($id, $body = null)
    {
        list($response) = $this->voucherMarkAsPaidWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation voucherMarkAsPaidWithHttpInfo
     *
     * Mark a specified voucher as paid
     *
     * @param int $id Id of the voucher you want to mark as paid (required)
     * @param string $body Enter the date the voucher was paid here, using the format DD.MM.YYYY! (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelVoucher, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherMarkAsPaidWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherMarkAsPaid');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/markAsPaid";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelVoucher',
                '/Voucher/{id}/markAsPaid'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelVoucher', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelVoucher', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation voucherRefundAmount
     *
     * Refund an amount for a specified voucher
     *
     * @param int $id Id of the voucher for which you want to refund an amount (required)
     * @param string $body Enter the amount which should be refunded, the date of the refund (format DD.MM.YYYY) and if it should appear in the feed an remove the quotation marks! (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelVoucherLog
     */
    public function voucherRefundAmount($id, $body = null)
    {
        list($response) = $this->voucherRefundAmountWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation voucherRefundAmountWithHttpInfo
     *
     * Refund an amount for a specified voucher
     *
     * @param int $id Id of the voucher for which you want to refund an amount (required)
     * @param string $body Enter the amount which should be refunded, the date of the refund (format DD.MM.YYYY) and if it should appear in the feed an remove the quotation marks! (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelVoucherLog, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherRefundAmountWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling voucherRefundAmount');
        }
        // parse inputs
        $resourcePath = "/Voucher/{id}/refundAmmount";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelVoucherLog',
                '/Voucher/{id}/refundAmmount'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelVoucherLog', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelVoucherLog', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation voucherUploadTempFile
     *
     * Upload a temporary file to be used later
     *
     * @param \SplFileObject $file file to upload (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelVoucherFactory
     */
    public function voucherUploadTempFile($file)
    {
        list($response) = $this->voucherUploadTempFileWithHttpInfo($file);
        return $response;
    }

    /**
     * Operation voucherUploadTempFileWithHttpInfo
     *
     * Upload a temporary file to be used later
     *
     * @param \SplFileObject $file file to upload (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelVoucherFactory, HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherUploadTempFileWithHttpInfo($file)
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling voucherUploadTempFile');
        }
        // parse inputs
        $resourcePath = "/Voucher/Factory/uploadTempFile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelVoucherFactory',
                '/Voucher/Factory/uploadTempFile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelVoucherFactory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelVoucherFactory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
