<?php
/**
 * OrderApi
 * PHP version 5
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace flagbit\sevdesk\phpclient\Api;

use \flagbit\sevdesk\phpclient\ApiClient;
use \flagbit\sevdesk\phpclient\ApiException;
use \flagbit\sevdesk\phpclient\Configuration;
use \flagbit\sevdesk\phpclient\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderApi
{
    /**
     * API Client
     *
     * @var \flagbit\sevdesk\phpclient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \flagbit\sevdesk\phpclient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\flagbit\sevdesk\phpclient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \flagbit\sevdesk\phpclient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \flagbit\sevdesk\phpclient\ApiClient $apiClient set the API client
     *
     * @return OrderApi
     */
    public function setApiClient(\flagbit\sevdesk\phpclient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addOrder
     *
     * Create a new order
     *
     * @param string $body To create an order, simply enter desired values after parameter&#x3D;, concatenate additional parameters with &amp; and remove the quotation marks.    Be aware that you can&#39;t use all the parameters included in the Model_Order, as creating an order involves other functions/models.    So for example, adding a sumNet/Gross/etc. does not work as they normally get their value from the product/part which is involved in the order.    The product/part in this case is handled in the Model_OrderPos which makes a call to Model_Part.    In Order.php there is only a function &#39;getPositions&#39; which makes the call to OrderPos.php to get the positions involved in the order. (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelOrder
     */
    public function addOrder($body)
    {
        list($response) = $this->addOrderWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addOrderWithHttpInfo
     *
     * Create a new order
     *
     * @param string $body To create an order, simply enter desired values after parameter&#x3D;, concatenate additional parameters with &amp; and remove the quotation marks.    Be aware that you can&#39;t use all the parameters included in the Model_Order, as creating an order involves other functions/models.    So for example, adding a sumNet/Gross/etc. does not work as they normally get their value from the product/part which is involved in the order.    The product/part in this case is handled in the Model_OrderPos which makes a call to Model_Part.    In Order.php there is only a function &#39;getPositions&#39; which makes the call to OrderPos.php to get the positions involved in the order. (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function addOrderWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addOrder');
        }
        // parse inputs
        $resourcePath = "/Order";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelOrder',
                '/Order'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelOrder', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation copyOrder
     *
     * Copy an existing order
     *
     * @param int $id Id of the order which you want to copy (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelOrder
     */
    public function copyOrder($id)
    {
        list($response) = $this->copyOrderWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation copyOrderWithHttpInfo
     *
     * Copy an existing order
     *
     * @param int $id Id of the order which you want to copy (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function copyOrderWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling copyOrder');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/copy";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelOrder',
                '/Order/{id}/copy'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelOrder', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOrder
     *
     * Delete an existing order
     *
     * @param int $id id of order you want to delete (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function deleteOrder($id)
    {
        list($response) = $this->deleteOrderWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteOrderWithHttpInfo
     *
     * Delete an existing order
     *
     * @param int $id id of order you want to delete (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrderWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteOrder');
        }
        // parse inputs
        $resourcePath = "/Order/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation duplicateOrder
     *
     * Duplicate an existing order
     *
     * @param int $id Id of the order which you want to duplicate (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelOrder
     */
    public function duplicateOrder($id)
    {
        list($response) = $this->duplicateOrderWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation duplicateOrderWithHttpInfo
     *
     * Duplicate an existing order
     *
     * @param int $id Id of the order which you want to duplicate (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function duplicateOrderWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling duplicateOrder');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/duplicate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelOrder',
                '/Order/{id}/duplicate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelOrder', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getNextOrderNumber
     *
     * Get the next order number
     *
     * @param string $order_type defines the type of order you want to get the next number from (required)
     * @param bool $use_next_number By default this is true, so the orderNumber will increase by one otherwise the orderNumber will not change (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function getNextOrderNumber($order_type, $use_next_number)
    {
        list($response) = $this->getNextOrderNumberWithHttpInfo($order_type, $use_next_number);
        return $response;
    }

    /**
     * Operation getNextOrderNumberWithHttpInfo
     *
     * Get the next order number
     *
     * @param string $order_type defines the type of order you want to get the next number from (required)
     * @param bool $use_next_number By default this is true, so the orderNumber will increase by one otherwise the orderNumber will not change (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNextOrderNumberWithHttpInfo($order_type, $use_next_number)
    {
        // verify the required parameter 'order_type' is set
        if ($order_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_type when calling getNextOrderNumber');
        }
        // verify the required parameter 'use_next_number' is set
        if ($use_next_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $use_next_number when calling getNextOrderNumber');
        }
        // parse inputs
        $resourcePath = "/Order/Factory/getNextOrderNumber";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/application/x-www-form-urlencoded']);

        // query params
        if ($order_type !== null) {
            $queryParams['orderType'] = $this->apiClient->getSerializer()->toQueryValue($order_type);
        }
        // query params
        if ($use_next_number !== null) {
            $queryParams['useNextNumber'] = $this->apiClient->getSerializer()->toQueryValue($use_next_number);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/Factory/getNextOrderNumber'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getOrderDiscounts
     *
     * Get all order discounts
     *
     * @param int $id Id of the order of which you want to get the discounts (required)
     * @param int $limit Limits the number of entries returned. Default is 100 (optional, default to 100)
     * @param int $offset Set the index where the returned order positions start. Default is 0 (optional, default to 0)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelDiscounts
     */
    public function getOrderDiscounts($id, $limit = '100', $offset = '0', $embed = null)
    {
        list($response) = $this->getOrderDiscountsWithHttpInfo($id, $limit, $offset, $embed);
        return $response;
    }

    /**
     * Operation getOrderDiscountsWithHttpInfo
     *
     * Get all order discounts
     *
     * @param int $id Id of the order of which you want to get the discounts (required)
     * @param int $limit Limits the number of entries returned. Default is 100 (optional, default to 100)
     * @param int $offset Set the index where the returned order positions start. Default is 0 (optional, default to 0)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelDiscounts, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderDiscountsWithHttpInfo($id, $limit = '100', $offset = '0', $embed = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getOrderDiscounts');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getDiscounts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if (is_array($embed)) {
            $embed = $this->apiClient->getSerializer()->serializeCollection($embed, 'csv', true);
        }
        if ($embed !== null) {
            $queryParams['embed'] = $this->apiClient->getSerializer()->toQueryValue($embed);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelDiscounts',
                '/Order/{id}/getDiscounts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelDiscounts', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelDiscounts', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrders
     *
     * Get an overview of all orders
     *
     * @param int $limit Limits the number of entries returned. Default is 100 (optional, default to 100)
     * @param int $offset Set the index where the returned invoice positions start. Default is 0 (optional, default to 0)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60; (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelOrder
     */
    public function getOrders($limit = '100', $offset = '0', $embed = null)
    {
        list($response) = $this->getOrdersWithHttpInfo($limit, $offset, $embed);
        return $response;
    }

    /**
     * Operation getOrdersWithHttpInfo
     *
     * Get an overview of all orders
     *
     * @param int $limit Limits the number of entries returned. Default is 100 (optional, default to 100)
     * @param int $offset Set the index where the returned invoice positions start. Default is 0 (optional, default to 0)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60; (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrdersWithHttpInfo($limit = '100', $offset = '0', $embed = null)
    {
        // parse inputs
        $resourcePath = "/Order";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if (is_array($embed)) {
            $embed = $this->apiClient->getSerializer()->serializeCollection($embed, 'csv', true);
        }
        if ($embed !== null) {
            $queryParams['embed'] = $this->apiClient->getSerializer()->toQueryValue($embed);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelOrder',
                '/Order'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelOrder', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderChangeStatus
     *
     * Update status of an existing order
     *
     * @param int $id Id of order of which you want to change the status (required)
     * @param string $body Enter desired values after parameter&#x3D; and remove the quotation marks!    If updateOther is set to &#39;true&#39;, changeStatus will also change other orders with the same order number.    If updateContactStatus is set to &#39;true&#39;, changeStatus will update the connected contacts category if necessary. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelOrder
     */
    public function orderChangeStatus($id, $body = null)
    {
        list($response) = $this->orderChangeStatusWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation orderChangeStatusWithHttpInfo
     *
     * Update status of an existing order
     *
     * @param int $id Id of order of which you want to change the status (required)
     * @param string $body Enter desired values after parameter&#x3D; and remove the quotation marks!    If updateOther is set to &#39;true&#39;, changeStatus will also change other orders with the same order number.    If updateContactStatus is set to &#39;true&#39;, changeStatus will update the connected contacts category if necessary. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderChangeStatusWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderChangeStatus');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/changeStatus";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelOrder',
                '/Order/{id}/changeStatus'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelOrder', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetChargeableInformation
     *
     * Get sum charged already, total net, gross and tax amount and tax rate
     *
     * @param int $id Id of the order of which you want to get the information (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function orderGetChargeableInformation($id)
    {
        list($response) = $this->orderGetChargeableInformationWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation orderGetChargeableInformationWithHttpInfo
     *
     * Get sum charged already, total net, gross and tax amount and tax rate
     *
     * @param int $id Id of the order of which you want to get the information (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetChargeableInformationWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetChargeableInformation');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getChargeableInformation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/{id}/getChargeableInformation'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetChargeableSums
     *
     * Get total net, gross and tax amount of order
     *
     * @param int $id Id of the order of which you want to get the total net, gross and tax amount (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function orderGetChargeableSums($id)
    {
        list($response) = $this->orderGetChargeableSumsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation orderGetChargeableSumsWithHttpInfo
     *
     * Get total net, gross and tax amount of order
     *
     * @param int $id Id of the order of which you want to get the total net, gross and tax amount (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetChargeableSumsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetChargeableSums');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getChargeableSums";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/{id}/getChargeableSums'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetMainOrderByLogs
     *
     * Get main order by checking if there are existing order logs of the specified order
     *
     * @param int $id Id of the order of which you want to know if it is the main order (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelOrder
     */
    public function orderGetMainOrderByLogs($id)
    {
        list($response) = $this->orderGetMainOrderByLogsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation orderGetMainOrderByLogsWithHttpInfo
     *
     * Get main order by checking if there are existing order logs of the specified order
     *
     * @param int $id Id of the order of which you want to know if it is the main order (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetMainOrderByLogsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetMainOrderByLogs');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getMainOrderByLogs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelOrder',
                '/Order/{id}/getMainOrderByLogs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelOrder', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetPdf
     *
     * Get the order as a pdf
     *
     * @param int $id Id of the order of which you want to get the pdf (required)
     * @param bool $prevent_send_by Define if you want to prevent to send the order via pdf (optional, default to false)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function orderGetPdf($id, $prevent_send_by = 'false')
    {
        list($response) = $this->orderGetPdfWithHttpInfo($id, $prevent_send_by);
        return $response;
    }

    /**
     * Operation orderGetPdfWithHttpInfo
     *
     * Get the order as a pdf
     *
     * @param int $id Id of the order of which you want to get the pdf (required)
     * @param bool $prevent_send_by Define if you want to prevent to send the order via pdf (optional, default to false)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetPdfWithHttpInfo($id, $prevent_send_by = 'false')
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetPdf');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getPdf";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($prevent_send_by !== null) {
            $queryParams['preventSendBy'] = $this->apiClient->getSerializer()->toQueryValue($prevent_send_by);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/{id}/getPdf'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetPositions
     *
     * Get all order positions
     *
     * @param int $id Id of the order of which you want to get the positions (required)
     * @param bool $with_optional Define if you want optional order positions (optional, default to false)
     * @param bool $only_chargeable Define if you want only chargeable order positions (optional, default to false)
     * @param int $limit Limits the number of entries returned. Default is 100 (optional, default to 100)
     * @param int $offset Set the index where the returned order positions start. Default is 0 (optional, default to 0)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelOrderPos
     */
    public function orderGetPositions($id, $with_optional = 'false', $only_chargeable = 'false', $limit = '100', $offset = '0', $embed = null)
    {
        list($response) = $this->orderGetPositionsWithHttpInfo($id, $with_optional, $only_chargeable, $limit, $offset, $embed);
        return $response;
    }

    /**
     * Operation orderGetPositionsWithHttpInfo
     *
     * Get all order positions
     *
     * @param int $id Id of the order of which you want to get the positions (required)
     * @param bool $with_optional Define if you want optional order positions (optional, default to false)
     * @param bool $only_chargeable Define if you want only chargeable order positions (optional, default to false)
     * @param int $limit Limits the number of entries returned. Default is 100 (optional, default to 100)
     * @param int $offset Set the index where the returned order positions start. Default is 0 (optional, default to 0)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelOrderPos, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetPositionsWithHttpInfo($id, $with_optional = 'false', $only_chargeable = 'false', $limit = '100', $offset = '0', $embed = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetPositions');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getPositions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($with_optional !== null) {
            $queryParams['withOptional'] = $this->apiClient->getSerializer()->toQueryValue($with_optional);
        }
        // query params
        if ($only_chargeable !== null) {
            $queryParams['onlyChargeable'] = $this->apiClient->getSerializer()->toQueryValue($only_chargeable);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if (is_array($embed)) {
            $embed = $this->apiClient->getSerializer()->serializeCollection($embed, 'csv', true);
        }
        if ($embed !== null) {
            $queryParams['embed'] = $this->apiClient->getSerializer()->toQueryValue($embed);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelOrderPos',
                '/Order/{id}/getPositions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelOrderPos', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelOrderPos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetRelatedObjects
     *
     * Get related objects of a specified order
     *
     * @param int $id Id of the order of which you want to get the related objects (required)
     * @param bool $include_itself Define if the related objects include the order itself (optional, default to false)
     * @param bool $sort_by_type Define if you want the related objects sorted by type (optional, default to false)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function orderGetRelatedObjects($id, $include_itself = 'false', $sort_by_type = 'false', $embed = null)
    {
        list($response) = $this->orderGetRelatedObjectsWithHttpInfo($id, $include_itself, $sort_by_type, $embed);
        return $response;
    }

    /**
     * Operation orderGetRelatedObjectsWithHttpInfo
     *
     * Get related objects of a specified order
     *
     * @param int $id Id of the order of which you want to get the related objects (required)
     * @param bool $include_itself Define if the related objects include the order itself (optional, default to false)
     * @param bool $sort_by_type Define if you want the related objects sorted by type (optional, default to false)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetRelatedObjectsWithHttpInfo($id, $include_itself = 'false', $sort_by_type = 'false', $embed = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetRelatedObjects');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getRelatedObjects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($include_itself !== null) {
            $queryParams['includeItself'] = $this->apiClient->getSerializer()->toQueryValue($include_itself);
        }
        // query params
        if ($sort_by_type !== null) {
            $queryParams['sortByType'] = $this->apiClient->getSerializer()->toQueryValue($sort_by_type);
        }
        // query params
        if (is_array($embed)) {
            $embed = $this->apiClient->getSerializer()->serializeCollection($embed, 'csv', true);
        }
        if ($embed !== null) {
            $queryParams['embed'] = $this->apiClient->getSerializer()->toQueryValue($embed);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/{id}/getRelatedObjects'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetTags
     *
     * Get tags of the specified order
     *
     * @param int $id Id of the order of which you want to get the tags (required)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function orderGetTags($id, $embed = null)
    {
        list($response) = $this->orderGetTagsWithHttpInfo($id, $embed);
        return $response;
    }

    /**
     * Operation orderGetTagsWithHttpInfo
     *
     * Get tags of the specified order
     *
     * @param int $id Id of the order of which you want to get the tags (required)
     * @param string[] $embed Get some additional information. Embed can handle multiple values, they must be separated by comma. Default &#x60;&#x60;. (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetTagsWithHttpInfo($id, $embed = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetTags');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getTags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if (is_array($embed)) {
            $embed = $this->apiClient->getSerializer()->serializeCollection($embed, 'csv', true);
        }
        if ($embed !== null) {
            $queryParams['embed'] = $this->apiClient->getSerializer()->toQueryValue($embed);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/{id}/getTags'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetTax
     *
     * Get sum tax of the specified order
     *
     * @param int $id Id of the order of which you want to get the sum tax (required)
     * @param bool $foreign_currency Specify if a foreign currency is used (optional, default to false)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function orderGetTax($id, $foreign_currency = 'false')
    {
        list($response) = $this->orderGetTaxWithHttpInfo($id, $foreign_currency);
        return $response;
    }

    /**
     * Operation orderGetTaxWithHttpInfo
     *
     * Get sum tax of the specified order
     *
     * @param int $id Id of the order of which you want to get the sum tax (required)
     * @param bool $foreign_currency Specify if a foreign currency is used (optional, default to false)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetTaxWithHttpInfo($id, $foreign_currency = 'false')
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetTax');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getTax";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($foreign_currency !== null) {
            $queryParams['foreignCurrency'] = $this->apiClient->getSerializer()->toQueryValue($foreign_currency);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/{id}/getTax'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetTaxGroupes
     *
     * Get tax groups of the specified order
     *
     * @param int $id Id of the order of which you want to get the tax groups (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function orderGetTaxGroupes($id)
    {
        list($response) = $this->orderGetTaxGroupesWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation orderGetTaxGroupesWithHttpInfo
     *
     * Get tax groups of the specified order
     *
     * @param int $id Id of the order of which you want to get the tax groups (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetTaxGroupesWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetTaxGroupes');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getTaxGroupes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/{id}/getTaxGroupes'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetTotal
     *
     * Get sum gross of the specified order
     *
     * @param int $id Id of the order of which you want to get the sum gross (required)
     * @param bool $foreign_currency Specify if a foreign currency is used (optional, default to false)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function orderGetTotal($id, $foreign_currency = 'false')
    {
        list($response) = $this->orderGetTotalWithHttpInfo($id, $foreign_currency);
        return $response;
    }

    /**
     * Operation orderGetTotalWithHttpInfo
     *
     * Get sum gross of the specified order
     *
     * @param int $id Id of the order of which you want to get the sum gross (required)
     * @param bool $foreign_currency Specify if a foreign currency is used (optional, default to false)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetTotalWithHttpInfo($id, $foreign_currency = 'false')
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetTotal');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getTotal";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($foreign_currency !== null) {
            $queryParams['foreignCurrency'] = $this->apiClient->getSerializer()->toQueryValue($foreign_currency);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/{id}/getTotal'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetTotalCalc
     *
     * Get total gross amount of order
     *
     * @param int $id Id of the order of which you want to get the total gross amount (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function orderGetTotalCalc($id)
    {
        list($response) = $this->orderGetTotalCalcWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation orderGetTotalCalcWithHttpInfo
     *
     * Get total gross amount of order
     *
     * @param int $id Id of the order of which you want to get the total gross amount (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetTotalCalcWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetTotalCalc');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getTotalCalc";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/{id}/getTotalCalc'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetTotalNet
     *
     * Get total net amount of order
     *
     * @param int $id Id of the order of which you want to get the total net amount (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function orderGetTotalNet($id)
    {
        list($response) = $this->orderGetTotalNetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation orderGetTotalNetWithHttpInfo
     *
     * Get total net amount of order
     *
     * @param int $id Id of the order of which you want to get the total net amount (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetTotalNetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetTotalNet');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/getTotalNet";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/{id}/getTotalNet'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation orderRender
     *
     * Render the order document on doc server and return the metadata
     *
     * @param int $id Id of order you want to render (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function orderRender($id)
    {
        list($response) = $this->orderRenderWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation orderRenderWithHttpInfo
     *
     * Render the order document on doc server and return the metadata
     *
     * @param int $id Id of order you want to render (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderRenderWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderRender');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/render";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Order/{id}/render'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation orderSendBy
     *
     * Send an order by the desired send type
     *
     * @param int $id Id of order which you want to send (required)
     * @param string $send_type Your desired send type. Available are: VM &#x3D; Mail, VP &#x3D; Post, VPDF &#x3D; PDF, PRN &#x3D; Print (optional, default to )
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelOrder
     */
    public function orderSendBy($id, $send_type = '')
    {
        list($response) = $this->orderSendByWithHttpInfo($id, $send_type);
        return $response;
    }

    /**
     * Operation orderSendByWithHttpInfo
     *
     * Send an order by the desired send type
     *
     * @param int $id Id of order which you want to send (required)
     * @param string $send_type Your desired send type. Available are: VM &#x3D; Mail, VP &#x3D; Post, VPDF &#x3D; PDF, PRN &#x3D; Print (optional, default to )
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderSendByWithHttpInfo($id, $send_type = '')
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderSendBy');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/sendBy";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($send_type !== null) {
            $queryParams['sendType'] = $this->apiClient->getSerializer()->toQueryValue($send_type);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelOrder',
                '/Order/{id}/sendBy'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelOrder', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation sendOrderViaEmail
     *
     * Send an order via Email
     *
     * @param int $id Id of order you want to send via Email (required)
     * @param string $body Change the desired values after the parameters and remove the quotation marks. You can also add &#39;additionalAttachments&#39;, &#39;ccEmail&#x3D;&#39; and &#39;bccEmail&#39;    Please note: additionalAttachments is a String containing document id&#39;s (of existing documents!) (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelEmail
     */
    public function sendOrderViaEmail($id, $body)
    {
        list($response) = $this->sendOrderViaEmailWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation sendOrderViaEmailWithHttpInfo
     *
     * Send an order via Email
     *
     * @param int $id Id of order you want to send via Email (required)
     * @param string $body Change the desired values after the parameters and remove the quotation marks. You can also add &#39;additionalAttachments&#39;, &#39;ccEmail&#x3D;&#39; and &#39;bccEmail&#39;    Please note: additionalAttachments is a String containing document id&#39;s (of existing documents!) (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelEmail, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendOrderViaEmailWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling sendOrderViaEmail');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling sendOrderViaEmail');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/sendViaEmail";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelEmail',
                '/Order/{id}/sendViaEmail'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelEmail', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelEmail', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation sendOrderViaPost
     *
     * Send an order via post
     *
     * @param int $id Id of order you want to send via post (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelOrder
     */
    public function sendOrderViaPost($id)
    {
        list($response) = $this->sendOrderViaPostWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation sendOrderViaPostWithHttpInfo
     *
     * Send an order via post
     *
     * @param int $id Id of order you want to send via post (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendOrderViaPostWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling sendOrderViaPost');
        }
        // parse inputs
        $resourcePath = "/Order/{id}/sendViaPost";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelOrder',
                '/Order/{id}/sendViaPost'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelOrder', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateOrder
     *
     * Update an existing order
     *
     * @param int $id id of order you want to update (required)
     * @param string $body Parameters which need to be updated. Enter the parameters according to the syntax: parameter1&#x3D;&amp;parameter2&#x3D; (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \flagbit\sevdesk\phpclient\Model\ModelOrder
     */
    public function updateOrder($id, $body = null)
    {
        list($response) = $this->updateOrderWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateOrderWithHttpInfo
     *
     * Update an existing order
     *
     * @param int $id id of order you want to update (required)
     * @param string $body Parameters which need to be updated. Enter the parameters according to the syntax: parameter1&#x3D;&amp;parameter2&#x3D; (optional)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \flagbit\sevdesk\phpclient\Model\ModelOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrderWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateOrder');
        }
        // parse inputs
        $resourcePath = "/Order/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\flagbit\sevdesk\phpclient\Model\ModelOrder',
                '/Order/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\flagbit\sevdesk\phpclient\Model\ModelOrder', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\flagbit\sevdesk\phpclient\Model\ModelOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
