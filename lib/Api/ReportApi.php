<?php
/**
 * ReportApi
 * PHP version 5
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace flagbit\sevdesk\phpclient\Api;

use \flagbit\sevdesk\phpclient\ApiClient;
use \flagbit\sevdesk\phpclient\ApiException;
use \flagbit\sevdesk\phpclient\Configuration;
use \flagbit\sevdesk\phpclient\ObjectSerializer;

/**
 * ReportApi Class Doc Comment
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportApi
{
    /**
     * API Client
     *
     * @var \flagbit\sevdesk\phpclient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \flagbit\sevdesk\phpclient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\flagbit\sevdesk\phpclient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \flagbit\sevdesk\phpclient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \flagbit\sevdesk\phpclient\ApiClient $apiClient set the API client
     *
     * @return ReportApi
     */
    public function setApiClient(\flagbit\sevdesk\phpclient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation reportContact
     *
     * Export the contact
     *
     * @param bool $download Specifies if the document is downloaded (required)
     * @param int $contact_id Id of contact which should be exported (required)
     * @param string $contact_object_name Model name which is exported (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function reportContact($download, $contact_id, $contact_object_name)
    {
        list($response) = $this->reportContactWithHttpInfo($download, $contact_id, $contact_object_name);
        return $response;
    }

    /**
     * Operation reportContactWithHttpInfo
     *
     * Export the contact
     *
     * @param bool $download Specifies if the document is downloaded (required)
     * @param int $contact_id Id of contact which should be exported (required)
     * @param string $contact_object_name Model name which is exported (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportContactWithHttpInfo($download, $contact_id, $contact_object_name)
    {
        // verify the required parameter 'download' is set
        if ($download === null) {
            throw new \InvalidArgumentException('Missing the required parameter $download when calling reportContact');
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_id when calling reportContact');
        }
        // verify the required parameter 'contact_object_name' is set
        if ($contact_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_object_name when calling reportContact');
        }
        // parse inputs
        $resourcePath = "/Report/contact";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($contact_id !== null) {
            $queryParams['contact[id]'] = $this->apiClient->getSerializer()->toQueryValue($contact_id);
        }
        // query params
        if ($contact_object_name !== null) {
            $queryParams['contact[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($contact_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Report/contact'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportContactList
     *
     * Export the contact list
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported contacts (optional, default to 99999)
     * @param int $sev_query_offset Set the index where the exported contacts start (optional, default to 0)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function reportContactList($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_offset = '0')
    {
        list($response) = $this->reportContactListWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_offset);
        return $response;
    }

    /**
     * Operation reportContactListWithHttpInfo
     *
     * Export the contact list
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported contacts (optional, default to 99999)
     * @param int $sev_query_offset Set the index where the exported contacts start (optional, default to 0)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportContactListWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_offset = '0')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling reportContactList');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling reportContactList');
        }
        // parse inputs
        $resourcePath = "/Report/contactlist";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_offset !== null) {
            $queryParams['sevQuery[offset]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_offset);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Report/contactlist'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportInventory
     *
     * Export the inventory
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported inventory entries (optional, default to 99999)
     * @param int $sev_query_offset Set the index where the exported parts start (optional, default to 99999)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function reportInventory($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_offset = '99999')
    {
        list($response) = $this->reportInventoryWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_offset);
        return $response;
    }

    /**
     * Operation reportInventoryWithHttpInfo
     *
     * Export the inventory
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported inventory entries (optional, default to 99999)
     * @param int $sev_query_offset Set the index where the exported parts start (optional, default to 99999)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportInventoryWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_offset = '99999')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling reportInventory');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling reportInventory');
        }
        // parse inputs
        $resourcePath = "/Report/inventory";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_offset !== null) {
            $queryParams['sevQuery[offset]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_offset);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Report/inventory'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportInvoiceList
     *
     * Export the invoicelist
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported invoices (optional, default to 99999)
     * @param int $sev_query_offset Set the index where the exported invoices should start (optional, default to 0)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function reportInvoiceList($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_offset = '0')
    {
        list($response) = $this->reportInvoiceListWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_offset);
        return $response;
    }

    /**
     * Operation reportInvoiceListWithHttpInfo
     *
     * Export the invoicelist
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported invoices (optional, default to 99999)
     * @param int $sev_query_offset Set the index where the exported invoices should start (optional, default to 0)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportInvoiceListWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_offset = '0')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling reportInvoiceList');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling reportInvoiceList');
        }
        // parse inputs
        $resourcePath = "/Report/invoicelist";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_offset !== null) {
            $queryParams['sevQuery[offset]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_offset);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Report/invoicelist'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportOrderList
     *
     * Export the order list
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported orders (optional, default to 99999)
     * @param int $sev_query_offset Set the index where the exported orders should start (optional, default to 0)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function reportOrderList($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_offset = '0')
    {
        list($response) = $this->reportOrderListWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_offset);
        return $response;
    }

    /**
     * Operation reportOrderListWithHttpInfo
     *
     * Export the order list
     *
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported orders (optional, default to 99999)
     * @param int $sev_query_offset Set the index where the exported orders should start (optional, default to 0)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportOrderListWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_offset = '0')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling reportOrderList');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling reportOrderList');
        }
        // parse inputs
        $resourcePath = "/Report/orderlist";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_offset !== null) {
            $queryParams['sevQuery[offset]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_offset);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Report/orderlist'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportProfitAndLoss
     *
     * Export the profit and loss
     *
     * @param string $start_date Start date of the profit and loss calculation (required)
     * @param string $end_date End date of the profit and loss calculation (required)
     * @param bool $tax_rule Specify if you want the net income method or the profit and loss (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function reportProfitAndLoss($start_date, $end_date, $tax_rule, $download = 'true')
    {
        list($response) = $this->reportProfitAndLossWithHttpInfo($start_date, $end_date, $tax_rule, $download);
        return $response;
    }

    /**
     * Operation reportProfitAndLossWithHttpInfo
     *
     * Export the profit and loss
     *
     * @param string $start_date Start date of the profit and loss calculation (required)
     * @param string $end_date End date of the profit and loss calculation (required)
     * @param bool $tax_rule Specify if you want the net income method or the profit and loss (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportProfitAndLossWithHttpInfo($start_date, $end_date, $tax_rule, $download = 'true')
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling reportProfitAndLoss');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling reportProfitAndLoss');
        }
        // verify the required parameter 'tax_rule' is set
        if ($tax_rule === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tax_rule when calling reportProfitAndLoss');
        }
        // parse inputs
        $resourcePath = "/Report/profitAndLoss";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($tax_rule !== null) {
            $queryParams['taxRule'] = $this->apiClient->getSerializer()->toQueryValue($tax_rule);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Report/profitAndLoss'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportRegisterBook
     *
     * Export the register book / cash report
     *
     * @param int $check_account_id Check account you want to export (required)
     * @param string $check_account_object_name Check account object name (required)
     * @param string $start_date Start date of the register book / cash report (required)
     * @param string $end_date End date of the register book / cash report (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function reportRegisterBook($check_account_id, $check_account_object_name, $start_date, $end_date, $download = 'true')
    {
        list($response) = $this->reportRegisterBookWithHttpInfo($check_account_id, $check_account_object_name, $start_date, $end_date, $download);
        return $response;
    }

    /**
     * Operation reportRegisterBookWithHttpInfo
     *
     * Export the register book / cash report
     *
     * @param int $check_account_id Check account you want to export (required)
     * @param string $check_account_object_name Check account object name (required)
     * @param string $start_date Start date of the register book / cash report (required)
     * @param string $end_date End date of the register book / cash report (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportRegisterBookWithHttpInfo($check_account_id, $check_account_object_name, $start_date, $end_date, $download = 'true')
    {
        // verify the required parameter 'check_account_id' is set
        if ($check_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_account_id when calling reportRegisterBook');
        }
        // verify the required parameter 'check_account_object_name' is set
        if ($check_account_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_account_object_name when calling reportRegisterBook');
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling reportRegisterBook');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling reportRegisterBook');
        }
        // parse inputs
        $resourcePath = "/Report/registerBook";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($check_account_id !== null) {
            $queryParams['checkAccount[id]'] = $this->apiClient->getSerializer()->toQueryValue($check_account_id);
        }
        // query params
        if ($check_account_object_name !== null) {
            $queryParams['checkAccount[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($check_account_object_name);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Report/registerBook'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportVoucherList
     *
     * Export the voucher list
     *
     * @param string $sev_query_filter_start_date Start date to filter vouchers with (required)
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param int $sev_query_offset Set the index where the exported vouchers should start (optional, default to 0)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function reportVoucherList($sev_query_filter_start_date, $sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_offset = '0')
    {
        list($response) = $this->reportVoucherListWithHttpInfo($sev_query_filter_start_date, $sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_offset);
        return $response;
    }

    /**
     * Operation reportVoucherListWithHttpInfo
     *
     * Export the voucher list
     *
     * @param string $sev_query_filter_start_date Start date to filter vouchers with (required)
     * @param string $sev_query_model_name Model name which is exported (required)
     * @param string $sev_query_object_name SevQuery object name (required)
     * @param bool $download Specifies if the document is downloaded (optional, default to true)
     * @param int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param int $sev_query_offset Set the index where the exported vouchers should start (optional, default to 0)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportVoucherListWithHttpInfo($sev_query_filter_start_date, $sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_offset = '0')
    {
        // verify the required parameter 'sev_query_filter_start_date' is set
        if ($sev_query_filter_start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_filter_start_date when calling reportVoucherList');
        }
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_model_name when calling reportVoucherList');
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sev_query_object_name when calling reportVoucherList');
        }
        // parse inputs
        $resourcePath = "/Report/voucherlist";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($download !== null) {
            $queryParams['download'] = $this->apiClient->getSerializer()->toQueryValue($download);
        }
        // query params
        if ($sev_query_filter_start_date !== null) {
            $queryParams['sevQuery[filter][startDate]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_filter_start_date);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_offset !== null) {
            $queryParams['sevQuery[offset]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_offset);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = $this->apiClient->getSerializer()->toQueryValue($sev_query_object_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Report/voucherlist'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
