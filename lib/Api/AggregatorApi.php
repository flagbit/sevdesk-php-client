<?php
/**
 * AggregatorApi
 * PHP version 5
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace flagbit\sevdesk\phpclient\Api;

use \flagbit\sevdesk\phpclient\ApiClient;
use \flagbit\sevdesk\phpclient\ApiException;
use \flagbit\sevdesk\phpclient\Configuration;
use \flagbit\sevdesk\phpclient\ObjectSerializer;

/**
 * AggregatorApi Class Doc Comment
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AggregatorApi
{
    /**
     * API Client
     *
     * @var \flagbit\sevdesk\phpclient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \flagbit\sevdesk\phpclient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\flagbit\sevdesk\phpclient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \flagbit\sevdesk\phpclient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \flagbit\sevdesk\phpclient\ApiClient $apiClient set the API client
     *
     * @return AggregatorApi
     */
    public function setApiClient(\flagbit\sevdesk\phpclient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation aggregatorCalcTotalDepreciation
     *
     * Calculates total sum of all asset amounts for the year of the current query
     *
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function aggregatorCalcTotalDepreciation()
    {
        list($response) = $this->aggregatorCalcTotalDepreciationWithHttpInfo();
        return $response;
    }

    /**
     * Operation aggregatorCalcTotalDepreciationWithHttpInfo
     *
     * Calculates total sum of all asset amounts for the year of the current query
     *
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aggregatorCalcTotalDepreciationWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Aggregator/calcTotalDepreciation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Aggregator/calcTotalDepreciation'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation aggregatorGetAccountingScore
     *
     * Get accounting score
     *
     * @param string $startdate Start date for the accounting score calculation (optional, default to )
     * @param string $enddate End date for the accounting score calculation (optional, default to )
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function aggregatorGetAccountingScore($startdate = '', $enddate = '')
    {
        list($response) = $this->aggregatorGetAccountingScoreWithHttpInfo($startdate, $enddate);
        return $response;
    }

    /**
     * Operation aggregatorGetAccountingScoreWithHttpInfo
     *
     * Get accounting score
     *
     * @param string $startdate Start date for the accounting score calculation (optional, default to )
     * @param string $enddate End date for the accounting score calculation (optional, default to )
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aggregatorGetAccountingScoreWithHttpInfo($startdate = '', $enddate = '')
    {
        // parse inputs
        $resourcePath = "/Aggregator/getAccountingScore";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($startdate !== null) {
            $queryParams['startdate'] = $this->apiClient->getSerializer()->toQueryValue($startdate);
        }
        // query params
        if ($enddate !== null) {
            $queryParams['enddate'] = $this->apiClient->getSerializer()->toQueryValue($enddate);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Aggregator/getAccountingScore'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation aggregatorGetAppRevenueChartData
     *
     * Get the data which is displayed in the chart on the dashboard in the app
     *
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function aggregatorGetAppRevenueChartData()
    {
        list($response) = $this->aggregatorGetAppRevenueChartDataWithHttpInfo();
        return $response;
    }

    /**
     * Operation aggregatorGetAppRevenueChartDataWithHttpInfo
     *
     * Get the data which is displayed in the chart on the dashboard in the app
     *
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aggregatorGetAppRevenueChartDataWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Aggregator/getAppRevenueChartData";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Aggregator/getAppRevenueChartData'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation aggregatorGetProfitAndLossCalculation
     *
     * Calculates the profit and loss over a specified period
     *
     * @param string $start_date Start date of the period you want to calculate (required)
     * @param string $end_date End date of the period you want to calculate (required)
     * @param bool $actual_taxation Specify if you want to calculate the net income method (true) or the profit and loss (false) (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function aggregatorGetProfitAndLossCalculation($start_date, $end_date, $actual_taxation)
    {
        list($response) = $this->aggregatorGetProfitAndLossCalculationWithHttpInfo($start_date, $end_date, $actual_taxation);
        return $response;
    }

    /**
     * Operation aggregatorGetProfitAndLossCalculationWithHttpInfo
     *
     * Calculates the profit and loss over a specified period
     *
     * @param string $start_date Start date of the period you want to calculate (required)
     * @param string $end_date End date of the period you want to calculate (required)
     * @param bool $actual_taxation Specify if you want to calculate the net income method (true) or the profit and loss (false) (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aggregatorGetProfitAndLossCalculationWithHttpInfo($start_date, $end_date, $actual_taxation)
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling aggregatorGetProfitAndLossCalculation');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling aggregatorGetProfitAndLossCalculation');
        }
        // verify the required parameter 'actual_taxation' is set
        if ($actual_taxation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $actual_taxation when calling aggregatorGetProfitAndLossCalculation');
        }
        // parse inputs
        $resourcePath = "/Aggregator/getProfitAndLossCalculation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($actual_taxation !== null) {
            $queryParams['actualTaxation'] = $this->apiClient->getSerializer()->toQueryValue($actual_taxation);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Aggregator/getProfitAndLossCalculation'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation aggregatorGetTaxInformation
     *
     * Calculates tax of earnings and spending over a specified period
     *
     * @param string $type Tax period you want to calculate with (required)
     * @param string $year Year of your tax calculation (required)
     * @param int $period Starting period (month) of your tax calculation (required)
     * @param bool $actual_taxation Specify if you want to calculate the net income method (true) or the profit and loss (false) (required)
     * @param bool $no_actual_taxation_on_input_tax Specify if you want no actual taxation on input tax (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function aggregatorGetTaxInformation($type, $year, $period, $actual_taxation, $no_actual_taxation_on_input_tax)
    {
        list($response) = $this->aggregatorGetTaxInformationWithHttpInfo($type, $year, $period, $actual_taxation, $no_actual_taxation_on_input_tax);
        return $response;
    }

    /**
     * Operation aggregatorGetTaxInformationWithHttpInfo
     *
     * Calculates tax of earnings and spending over a specified period
     *
     * @param string $type Tax period you want to calculate with (required)
     * @param string $year Year of your tax calculation (required)
     * @param int $period Starting period (month) of your tax calculation (required)
     * @param bool $actual_taxation Specify if you want to calculate the net income method (true) or the profit and loss (false) (required)
     * @param bool $no_actual_taxation_on_input_tax Specify if you want no actual taxation on input tax (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aggregatorGetTaxInformationWithHttpInfo($type, $year, $period, $actual_taxation, $no_actual_taxation_on_input_tax)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling aggregatorGetTaxInformation');
        }
        // verify the required parameter 'year' is set
        if ($year === null) {
            throw new \InvalidArgumentException('Missing the required parameter $year when calling aggregatorGetTaxInformation');
        }
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling aggregatorGetTaxInformation');
        }
        // verify the required parameter 'actual_taxation' is set
        if ($actual_taxation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $actual_taxation when calling aggregatorGetTaxInformation');
        }
        // verify the required parameter 'no_actual_taxation_on_input_tax' is set
        if ($no_actual_taxation_on_input_tax === null) {
            throw new \InvalidArgumentException('Missing the required parameter $no_actual_taxation_on_input_tax when calling aggregatorGetTaxInformation');
        }
        // parse inputs
        $resourcePath = "/Aggregator/getTaxInformation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = $this->apiClient->getSerializer()->toQueryValue($year);
        }
        // query params
        if ($period !== null) {
            $queryParams['period'] = $this->apiClient->getSerializer()->toQueryValue($period);
        }
        // query params
        if ($actual_taxation !== null) {
            $queryParams['actualTaxation'] = $this->apiClient->getSerializer()->toQueryValue($actual_taxation);
        }
        // query params
        if ($no_actual_taxation_on_input_tax !== null) {
            $queryParams['noActualTaxationOnInputTax'] = $this->apiClient->getSerializer()->toQueryValue($no_actual_taxation_on_input_tax);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Aggregator/getTaxInformation'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation aggregatorGetVoucherCategoryInformation
     *
     * Get information about the categories of all vouchers in the year of the current query
     *
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function aggregatorGetVoucherCategoryInformation()
    {
        list($response) = $this->aggregatorGetVoucherCategoryInformationWithHttpInfo();
        return $response;
    }

    /**
     * Operation aggregatorGetVoucherCategoryInformationWithHttpInfo
     *
     * Get information about the categories of all vouchers in the year of the current query
     *
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aggregatorGetVoucherCategoryInformationWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Aggregator/getVoucherCategoryInformation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Aggregator/getVoucherCategoryInformation'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation aggregatorGetVoucherChartData
     *
     * Get voucher chart data
     *
     * @param string $year Year for which you want to get the voucher chart data (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function aggregatorGetVoucherChartData($year)
    {
        list($response) = $this->aggregatorGetVoucherChartDataWithHttpInfo($year);
        return $response;
    }

    /**
     * Operation aggregatorGetVoucherChartDataWithHttpInfo
     *
     * Get voucher chart data
     *
     * @param string $year Year for which you want to get the voucher chart data (required)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aggregatorGetVoucherChartDataWithHttpInfo($year)
    {
        // verify the required parameter 'year' is set
        if ($year === null) {
            throw new \InvalidArgumentException('Missing the required parameter $year when calling aggregatorGetVoucherChartData');
        }
        // parse inputs
        $resourcePath = "/Aggregator/getVoucherChartData";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($year !== null) {
            $queryParams['year'] = $this->apiClient->getSerializer()->toQueryValue($year);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Aggregator/getVoucherChartData'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation aggregatorGetWebRevenueChartData
     *
     * Get the data which is displayed in the chart on the dashboard
     *
     * @param bool $sum_gross_toggle Specify if you want to calculate sum gross instead of net (optional, default to false)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return void
     */
    public function aggregatorGetWebRevenueChartData($sum_gross_toggle = 'false')
    {
        list($response) = $this->aggregatorGetWebRevenueChartDataWithHttpInfo($sum_gross_toggle);
        return $response;
    }

    /**
     * Operation aggregatorGetWebRevenueChartDataWithHttpInfo
     *
     * Get the data which is displayed in the chart on the dashboard
     *
     * @param bool $sum_gross_toggle Specify if you want to calculate sum gross instead of net (optional, default to false)
     * @throws \flagbit\sevdesk\phpclient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aggregatorGetWebRevenueChartDataWithHttpInfo($sum_gross_toggle = 'false')
    {
        // parse inputs
        $resourcePath = "/Aggregator/getWebRevenueChartData";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($sum_gross_toggle !== null) {
            $queryParams['sumGrossToggle'] = $this->apiClient->getSerializer()->toQueryValue($sum_gross_toggle);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Aggregator/getWebRevenueChartData'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
