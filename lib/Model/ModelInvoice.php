<?php
/**
 * ModelInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace flagbit\sevdesk\phpclient\Model;

use \ArrayAccess;

/**
 * ModelInvoice Class Doc Comment
 *
 * @category    Class
 * @package     flagbit\sevdesk\phpclient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ModelInvoice implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Model_Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_invoice_number' => 'string',
        '_contact' => '\flagbit\sevdesk\phpclient\Model\ModelContact',
        '_create' => '\DateTime',
        '_update' => '\DateTime',
        '_invoice_date' => '\DateTime',
        '_header' => 'string',
        '_head_text' => 'string',
        '_foot_text' => 'string',
        '_time_to_pay' => '\DateTime',
        '_discount_time' => '\DateTime',
        '_discount' => 'float',
        '_address_name' => 'string',
        '_address_street' => 'string',
        '_address_zip' => 'string',
        '_address_city' => 'string',
        '_address_country' => '\flagbit\sevdesk\phpclient\Model\ModelStaticCountry',
        '_pay_date' => '\DateTime',
        '_create_user' => '\flagbit\sevdesk\phpclient\Model\ModelSevUser',
        '_sev_client' => 'object',
        '_delivery_date' => '\DateTime',
        '_status' => 'int',
        '_small_settlement' => 'bool',
        '_contact_person' => '\flagbit\sevdesk\phpclient\Model\ModelSevUser',
        '_tax_rate' => 'float',
        '_tax_text' => 'string',
        '_dunning_level' => 'int',
        '_address_parent_name' => 'string',
        '_address_contact_ref' => '\flagbit\sevdesk\phpclient\Model\ModelContactAddress',
        '_tax_type' => 'string',
        '_payment_method' => '\flagbit\sevdesk\phpclient\Model\ModelPaymentMethod',
        '_cost_centre' => '\flagbit\sevdesk\phpclient\Model\ModelCostCentre',
        '_send_date' => '\DateTime',
        '_origin' => 'object',
        '_invoice_type' => 'string',
        '_account_intervall' => 'int',
        '_account_last_invoice' => '\DateTime',
        '_account_next_invoice' => '\DateTime',
        '_reminder_total' => 'float',
        '_reminder_debit' => 'float',
        '_reminder_deadline' => '\DateTime',
        '_reminder_charge' => 'float',
        '_address_parent_name2' => 'string',
        '_address_name2' => 'string',
        '_tax_set' => '\flagbit\sevdesk\phpclient\Model\ModelTaxSet',
        '_address_gender' => 'string',
        '_account_end_date' => '\DateTime',
        '_address' => 'string',
        '_currency' => 'string',
        '_sum_net' => 'float',
        '_sum_tax' => 'float',
        '_sum_gross' => 'float',
        '_sum_discounts' => 'float',
        '_sum_net_foreign_currency' => 'float',
        '_sum_tax_foreign_currency' => 'float',
        '_sum_gross_foreign_currency' => 'float',
        '_sum_discounts_foreign_currency' => 'float',
        '_sum_net_accounting' => 'float',
        '_sum_tax_accounting' => 'float',
        '_sum_gross_accounting' => 'float',
        '_entry_type' => '\flagbit\sevdesk\phpclient\Model\ModelEntryType',
        '_costumer_internal_note' => 'string',
        '_show_net' => 'bool',
        '_enshrined' => 'bool',
        '_send_type' => 'string',
        '_delivery_date_until' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_invoice_number' => null,
        '_contact' => null,
        '_create' => 'date-time',
        '_update' => 'date-time',
        '_invoice_date' => 'date-time',
        '_header' => null,
        '_head_text' => null,
        '_foot_text' => null,
        '_time_to_pay' => 'date-time',
        '_discount_time' => 'date-time',
        '_discount' => 'float',
        '_address_name' => null,
        '_address_street' => null,
        '_address_zip' => null,
        '_address_city' => null,
        '_address_country' => null,
        '_pay_date' => 'date-time',
        '_create_user' => null,
        '_sev_client' => null,
        '_delivery_date' => 'date-time',
        '_status' => null,
        '_small_settlement' => null,
        '_contact_person' => null,
        '_tax_rate' => 'float',
        '_tax_text' => null,
        '_dunning_level' => null,
        '_address_parent_name' => null,
        '_address_contact_ref' => null,
        '_tax_type' => null,
        '_payment_method' => null,
        '_cost_centre' => null,
        '_send_date' => 'date-time',
        '_origin' => null,
        '_invoice_type' => null,
        '_account_intervall' => null,
        '_account_last_invoice' => 'date-time',
        '_account_next_invoice' => 'date-time',
        '_reminder_total' => 'float',
        '_reminder_debit' => 'float',
        '_reminder_deadline' => 'date-time',
        '_reminder_charge' => 'float',
        '_address_parent_name2' => null,
        '_address_name2' => null,
        '_tax_set' => null,
        '_address_gender' => null,
        '_account_end_date' => 'date-time',
        '_address' => null,
        '_currency' => null,
        '_sum_net' => 'float',
        '_sum_tax' => 'float',
        '_sum_gross' => 'float',
        '_sum_discounts' => 'float',
        '_sum_net_foreign_currency' => 'float',
        '_sum_tax_foreign_currency' => 'float',
        '_sum_gross_foreign_currency' => 'float',
        '_sum_discounts_foreign_currency' => 'float',
        '_sum_net_accounting' => 'float',
        '_sum_tax_accounting' => 'float',
        '_sum_gross_accounting' => 'float',
        '_entry_type' => null,
        '_costumer_internal_note' => null,
        '_show_net' => null,
        '_enshrined' => null,
        '_send_type' => null,
        '_delivery_date_until' => 'date-time'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        '_invoice_number' => '_invoiceNumber',
        '_contact' => '_contact',
        '_create' => '_create',
        '_update' => '_update',
        '_invoice_date' => '_invoiceDate',
        '_header' => '_header',
        '_head_text' => '_headText',
        '_foot_text' => '_footText',
        '_time_to_pay' => '_timeToPay',
        '_discount_time' => '_discountTime',
        '_discount' => '_discount',
        '_address_name' => '_addressName',
        '_address_street' => '_addressStreet',
        '_address_zip' => '_addressZip',
        '_address_city' => '_addressCity',
        '_address_country' => '_addressCountry',
        '_pay_date' => '_payDate',
        '_create_user' => '_createUser',
        '_sev_client' => '_sevClient',
        '_delivery_date' => '_deliveryDate',
        '_status' => '_status',
        '_small_settlement' => '_smallSettlement',
        '_contact_person' => '_contactPerson',
        '_tax_rate' => '_taxRate',
        '_tax_text' => '_taxText',
        '_dunning_level' => '_dunningLevel',
        '_address_parent_name' => '_addressParentName',
        '_address_contact_ref' => '_addressContactRef',
        '_tax_type' => '_taxType',
        '_payment_method' => '_paymentMethod',
        '_cost_centre' => '_costCentre',
        '_send_date' => '_sendDate',
        '_origin' => '_origin',
        '_invoice_type' => '_invoiceType',
        '_account_intervall' => '_accountIntervall',
        '_account_last_invoice' => '_accountLastInvoice',
        '_account_next_invoice' => '_accountNextInvoice',
        '_reminder_total' => '_reminderTotal',
        '_reminder_debit' => '_reminderDebit',
        '_reminder_deadline' => '_reminderDeadline',
        '_reminder_charge' => '_reminderCharge',
        '_address_parent_name2' => '_addressParentName2',
        '_address_name2' => '_addressName2',
        '_tax_set' => '_taxSet',
        '_address_gender' => '_addressGender',
        '_account_end_date' => '_accountEndDate',
        '_address' => '_address',
        '_currency' => '_currency',
        '_sum_net' => '_sumNet',
        '_sum_tax' => '_sumTax',
        '_sum_gross' => '_sumGross',
        '_sum_discounts' => '_sumDiscounts',
        '_sum_net_foreign_currency' => '_sumNetForeignCurrency',
        '_sum_tax_foreign_currency' => '_sumTaxForeignCurrency',
        '_sum_gross_foreign_currency' => '_sumGrossForeignCurrency',
        '_sum_discounts_foreign_currency' => '_sumDiscountsForeignCurrency',
        '_sum_net_accounting' => '_sumNetAccounting',
        '_sum_tax_accounting' => '_sumTaxAccounting',
        '_sum_gross_accounting' => '_sumGrossAccounting',
        '_entry_type' => '_entryType',
        '_costumer_internal_note' => '_costumerInternalNote',
        '_show_net' => '_showNet',
        '_enshrined' => '_enshrined',
        '_send_type' => '_sendType',
        '_delivery_date_until' => '_deliveryDateUntil'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        '_invoice_number' => 'setInvoiceNumber',
        '_contact' => 'setContact',
        '_create' => 'setCreate',
        '_update' => 'setUpdate',
        '_invoice_date' => 'setInvoiceDate',
        '_header' => 'setHeader',
        '_head_text' => 'setHeadText',
        '_foot_text' => 'setFootText',
        '_time_to_pay' => 'setTimeToPay',
        '_discount_time' => 'setDiscountTime',
        '_discount' => 'setDiscount',
        '_address_name' => 'setAddressName',
        '_address_street' => 'setAddressStreet',
        '_address_zip' => 'setAddressZip',
        '_address_city' => 'setAddressCity',
        '_address_country' => 'setAddressCountry',
        '_pay_date' => 'setPayDate',
        '_create_user' => 'setCreateUser',
        '_sev_client' => 'setSevClient',
        '_delivery_date' => 'setDeliveryDate',
        '_status' => 'setStatus',
        '_small_settlement' => 'setSmallSettlement',
        '_contact_person' => 'setContactPerson',
        '_tax_rate' => 'setTaxRate',
        '_tax_text' => 'setTaxText',
        '_dunning_level' => 'setDunningLevel',
        '_address_parent_name' => 'setAddressParentName',
        '_address_contact_ref' => 'setAddressContactRef',
        '_tax_type' => 'setTaxType',
        '_payment_method' => 'setPaymentMethod',
        '_cost_centre' => 'setCostCentre',
        '_send_date' => 'setSendDate',
        '_origin' => 'setOrigin',
        '_invoice_type' => 'setInvoiceType',
        '_account_intervall' => 'setAccountIntervall',
        '_account_last_invoice' => 'setAccountLastInvoice',
        '_account_next_invoice' => 'setAccountNextInvoice',
        '_reminder_total' => 'setReminderTotal',
        '_reminder_debit' => 'setReminderDebit',
        '_reminder_deadline' => 'setReminderDeadline',
        '_reminder_charge' => 'setReminderCharge',
        '_address_parent_name2' => 'setAddressParentName2',
        '_address_name2' => 'setAddressName2',
        '_tax_set' => 'setTaxSet',
        '_address_gender' => 'setAddressGender',
        '_account_end_date' => 'setAccountEndDate',
        '_address' => 'setAddress',
        '_currency' => 'setCurrency',
        '_sum_net' => 'setSumNet',
        '_sum_tax' => 'setSumTax',
        '_sum_gross' => 'setSumGross',
        '_sum_discounts' => 'setSumDiscounts',
        '_sum_net_foreign_currency' => 'setSumNetForeignCurrency',
        '_sum_tax_foreign_currency' => 'setSumTaxForeignCurrency',
        '_sum_gross_foreign_currency' => 'setSumGrossForeignCurrency',
        '_sum_discounts_foreign_currency' => 'setSumDiscountsForeignCurrency',
        '_sum_net_accounting' => 'setSumNetAccounting',
        '_sum_tax_accounting' => 'setSumTaxAccounting',
        '_sum_gross_accounting' => 'setSumGrossAccounting',
        '_entry_type' => 'setEntryType',
        '_costumer_internal_note' => 'setCostumerInternalNote',
        '_show_net' => 'setShowNet',
        '_enshrined' => 'setEnshrined',
        '_send_type' => 'setSendType',
        '_delivery_date_until' => 'setDeliveryDateUntil'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        '_invoice_number' => 'getInvoiceNumber',
        '_contact' => 'getContact',
        '_create' => 'getCreate',
        '_update' => 'getUpdate',
        '_invoice_date' => 'getInvoiceDate',
        '_header' => 'getHeader',
        '_head_text' => 'getHeadText',
        '_foot_text' => 'getFootText',
        '_time_to_pay' => 'getTimeToPay',
        '_discount_time' => 'getDiscountTime',
        '_discount' => 'getDiscount',
        '_address_name' => 'getAddressName',
        '_address_street' => 'getAddressStreet',
        '_address_zip' => 'getAddressZip',
        '_address_city' => 'getAddressCity',
        '_address_country' => 'getAddressCountry',
        '_pay_date' => 'getPayDate',
        '_create_user' => 'getCreateUser',
        '_sev_client' => 'getSevClient',
        '_delivery_date' => 'getDeliveryDate',
        '_status' => 'getStatus',
        '_small_settlement' => 'getSmallSettlement',
        '_contact_person' => 'getContactPerson',
        '_tax_rate' => 'getTaxRate',
        '_tax_text' => 'getTaxText',
        '_dunning_level' => 'getDunningLevel',
        '_address_parent_name' => 'getAddressParentName',
        '_address_contact_ref' => 'getAddressContactRef',
        '_tax_type' => 'getTaxType',
        '_payment_method' => 'getPaymentMethod',
        '_cost_centre' => 'getCostCentre',
        '_send_date' => 'getSendDate',
        '_origin' => 'getOrigin',
        '_invoice_type' => 'getInvoiceType',
        '_account_intervall' => 'getAccountIntervall',
        '_account_last_invoice' => 'getAccountLastInvoice',
        '_account_next_invoice' => 'getAccountNextInvoice',
        '_reminder_total' => 'getReminderTotal',
        '_reminder_debit' => 'getReminderDebit',
        '_reminder_deadline' => 'getReminderDeadline',
        '_reminder_charge' => 'getReminderCharge',
        '_address_parent_name2' => 'getAddressParentName2',
        '_address_name2' => 'getAddressName2',
        '_tax_set' => 'getTaxSet',
        '_address_gender' => 'getAddressGender',
        '_account_end_date' => 'getAccountEndDate',
        '_address' => 'getAddress',
        '_currency' => 'getCurrency',
        '_sum_net' => 'getSumNet',
        '_sum_tax' => 'getSumTax',
        '_sum_gross' => 'getSumGross',
        '_sum_discounts' => 'getSumDiscounts',
        '_sum_net_foreign_currency' => 'getSumNetForeignCurrency',
        '_sum_tax_foreign_currency' => 'getSumTaxForeignCurrency',
        '_sum_gross_foreign_currency' => 'getSumGrossForeignCurrency',
        '_sum_discounts_foreign_currency' => 'getSumDiscountsForeignCurrency',
        '_sum_net_accounting' => 'getSumNetAccounting',
        '_sum_tax_accounting' => 'getSumTaxAccounting',
        '_sum_gross_accounting' => 'getSumGrossAccounting',
        '_entry_type' => 'getEntryType',
        '_costumer_internal_note' => 'getCostumerInternalNote',
        '_show_net' => 'getShowNet',
        '_enshrined' => 'getEnshrined',
        '_send_type' => 'getSendType',
        '_delivery_date_until' => 'getDeliveryDateUntil'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TAX_TEXT_UMSATZSTEUER_AUSWEISEN = 'Umsatzsteuer ausweisen';
    const TAX_TEXT_STEUERFREIE_INNERGEMEINSCHAFTLICHE_LIEFERUNG_EUROPISCHE_UNION = 'Steuerfreie innergemeinschaftliche Lieferung(Europäische Union)';
    const TAX_TEXT_STEUERSCHULDNERSCHAFT_DES_LEISTUNGSEMPFNGERS__AUSSERHALB_EU_ZB_SCHWEIZ = 'Steuerschuldnerschaft des Leistungsempfängers (Außerhalb EU, z.B. Schweiz)';
    const TAX_TYPE__DEFAULT = 'default';
    const TAX_TYPE_EU = 'eu';
    const TAX_TYPE_NOTEU = 'noteu';
    const INVOICE_TYPE_RE__INVOICE = 'RE (Invoice)';
    const INVOICE_TYPE_MA__INVOICE_REMINDER = 'MA (Invoice reminder)';
    const INVOICE_TYPE_WKR__PERIODIC_INVOICE = 'WKR (periodic invoice)';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTaxTextAllowableValues()
    {
        return [
            self::TAX_TEXT_UMSATZSTEUER_AUSWEISEN,
            self::TAX_TEXT_STEUERFREIE_INNERGEMEINSCHAFTLICHE_LIEFERUNG_EUROPISCHE_UNION,
            self::TAX_TEXT_STEUERSCHULDNERSCHAFT_DES_LEISTUNGSEMPFNGERS__AUSSERHALB_EU_ZB_SCHWEIZ,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTaxTypeAllowableValues()
    {
        return [
            self::TAX_TYPE__DEFAULT,
            self::TAX_TYPE_EU,
            self::TAX_TYPE_NOTEU,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getInvoiceTypeAllowableValues()
    {
        return [
            self::INVOICE_TYPE_RE__INVOICE,
            self::INVOICE_TYPE_MA__INVOICE_REMINDER,
            self::INVOICE_TYPE_WKR__PERIODIC_INVOICE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_invoice_number'] = isset($data['_invoice_number']) ? $data['_invoice_number'] : null;
        $this->container['_contact'] = isset($data['_contact']) ? $data['_contact'] : null;
        $this->container['_create'] = isset($data['_create']) ? $data['_create'] : null;
        $this->container['_update'] = isset($data['_update']) ? $data['_update'] : null;
        $this->container['_invoice_date'] = isset($data['_invoice_date']) ? $data['_invoice_date'] : null;
        $this->container['_header'] = isset($data['_header']) ? $data['_header'] : null;
        $this->container['_head_text'] = isset($data['_head_text']) ? $data['_head_text'] : null;
        $this->container['_foot_text'] = isset($data['_foot_text']) ? $data['_foot_text'] : null;
        $this->container['_time_to_pay'] = isset($data['_time_to_pay']) ? $data['_time_to_pay'] : null;
        $this->container['_discount_time'] = isset($data['_discount_time']) ? $data['_discount_time'] : null;
        $this->container['_discount'] = isset($data['_discount']) ? $data['_discount'] : null;
        $this->container['_address_name'] = isset($data['_address_name']) ? $data['_address_name'] : null;
        $this->container['_address_street'] = isset($data['_address_street']) ? $data['_address_street'] : null;
        $this->container['_address_zip'] = isset($data['_address_zip']) ? $data['_address_zip'] : null;
        $this->container['_address_city'] = isset($data['_address_city']) ? $data['_address_city'] : null;
        $this->container['_address_country'] = isset($data['_address_country']) ? $data['_address_country'] : null;
        $this->container['_pay_date'] = isset($data['_pay_date']) ? $data['_pay_date'] : null;
        $this->container['_create_user'] = isset($data['_create_user']) ? $data['_create_user'] : null;
        $this->container['_sev_client'] = isset($data['_sev_client']) ? $data['_sev_client'] : null;
        $this->container['_delivery_date'] = isset($data['_delivery_date']) ? $data['_delivery_date'] : null;
        $this->container['_status'] = isset($data['_status']) ? $data['_status'] : null;
        $this->container['_small_settlement'] = isset($data['_small_settlement']) ? $data['_small_settlement'] : null;
        $this->container['_contact_person'] = isset($data['_contact_person']) ? $data['_contact_person'] : null;
        $this->container['_tax_rate'] = isset($data['_tax_rate']) ? $data['_tax_rate'] : null;
        $this->container['_tax_text'] = isset($data['_tax_text']) ? $data['_tax_text'] : null;
        $this->container['_dunning_level'] = isset($data['_dunning_level']) ? $data['_dunning_level'] : null;
        $this->container['_address_parent_name'] = isset($data['_address_parent_name']) ? $data['_address_parent_name'] : null;
        $this->container['_address_contact_ref'] = isset($data['_address_contact_ref']) ? $data['_address_contact_ref'] : null;
        $this->container['_tax_type'] = isset($data['_tax_type']) ? $data['_tax_type'] : null;
        $this->container['_payment_method'] = isset($data['_payment_method']) ? $data['_payment_method'] : null;
        $this->container['_cost_centre'] = isset($data['_cost_centre']) ? $data['_cost_centre'] : null;
        $this->container['_send_date'] = isset($data['_send_date']) ? $data['_send_date'] : null;
        $this->container['_origin'] = isset($data['_origin']) ? $data['_origin'] : null;
        $this->container['_invoice_type'] = isset($data['_invoice_type']) ? $data['_invoice_type'] : null;
        $this->container['_account_intervall'] = isset($data['_account_intervall']) ? $data['_account_intervall'] : null;
        $this->container['_account_last_invoice'] = isset($data['_account_last_invoice']) ? $data['_account_last_invoice'] : null;
        $this->container['_account_next_invoice'] = isset($data['_account_next_invoice']) ? $data['_account_next_invoice'] : null;
        $this->container['_reminder_total'] = isset($data['_reminder_total']) ? $data['_reminder_total'] : null;
        $this->container['_reminder_debit'] = isset($data['_reminder_debit']) ? $data['_reminder_debit'] : null;
        $this->container['_reminder_deadline'] = isset($data['_reminder_deadline']) ? $data['_reminder_deadline'] : null;
        $this->container['_reminder_charge'] = isset($data['_reminder_charge']) ? $data['_reminder_charge'] : null;
        $this->container['_address_parent_name2'] = isset($data['_address_parent_name2']) ? $data['_address_parent_name2'] : null;
        $this->container['_address_name2'] = isset($data['_address_name2']) ? $data['_address_name2'] : null;
        $this->container['_tax_set'] = isset($data['_tax_set']) ? $data['_tax_set'] : null;
        $this->container['_address_gender'] = isset($data['_address_gender']) ? $data['_address_gender'] : null;
        $this->container['_account_end_date'] = isset($data['_account_end_date']) ? $data['_account_end_date'] : null;
        $this->container['_address'] = isset($data['_address']) ? $data['_address'] : null;
        $this->container['_currency'] = isset($data['_currency']) ? $data['_currency'] : null;
        $this->container['_sum_net'] = isset($data['_sum_net']) ? $data['_sum_net'] : null;
        $this->container['_sum_tax'] = isset($data['_sum_tax']) ? $data['_sum_tax'] : null;
        $this->container['_sum_gross'] = isset($data['_sum_gross']) ? $data['_sum_gross'] : null;
        $this->container['_sum_discounts'] = isset($data['_sum_discounts']) ? $data['_sum_discounts'] : null;
        $this->container['_sum_net_foreign_currency'] = isset($data['_sum_net_foreign_currency']) ? $data['_sum_net_foreign_currency'] : null;
        $this->container['_sum_tax_foreign_currency'] = isset($data['_sum_tax_foreign_currency']) ? $data['_sum_tax_foreign_currency'] : null;
        $this->container['_sum_gross_foreign_currency'] = isset($data['_sum_gross_foreign_currency']) ? $data['_sum_gross_foreign_currency'] : null;
        $this->container['_sum_discounts_foreign_currency'] = isset($data['_sum_discounts_foreign_currency']) ? $data['_sum_discounts_foreign_currency'] : null;
        $this->container['_sum_net_accounting'] = isset($data['_sum_net_accounting']) ? $data['_sum_net_accounting'] : null;
        $this->container['_sum_tax_accounting'] = isset($data['_sum_tax_accounting']) ? $data['_sum_tax_accounting'] : null;
        $this->container['_sum_gross_accounting'] = isset($data['_sum_gross_accounting']) ? $data['_sum_gross_accounting'] : null;
        $this->container['_entry_type'] = isset($data['_entry_type']) ? $data['_entry_type'] : null;
        $this->container['_costumer_internal_note'] = isset($data['_costumer_internal_note']) ? $data['_costumer_internal_note'] : null;
        $this->container['_show_net'] = isset($data['_show_net']) ? $data['_show_net'] : null;
        $this->container['_enshrined'] = isset($data['_enshrined']) ? $data['_enshrined'] : null;
        $this->container['_send_type'] = isset($data['_send_type']) ? $data['_send_type'] : null;
        $this->container['_delivery_date_until'] = isset($data['_delivery_date_until']) ? $data['_delivery_date_until'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['_tax_rate']) && ($this->container['_tax_rate'] > 100)) {
            $invalid_properties[] = "invalid value for '_tax_rate', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['_tax_rate']) && ($this->container['_tax_rate'] < 0)) {
            $invalid_properties[] = "invalid value for '_tax_rate', must be bigger than or equal to 0.";
        }

        $allowed_values = $this->getTaxTextAllowableValues();
        if (!in_array($this->container['_tax_text'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for '_tax_text', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getTaxTypeAllowableValues();
        if (!in_array($this->container['_tax_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for '_tax_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getInvoiceTypeAllowableValues();
        if (!in_array($this->container['_invoice_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for '_invoice_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['_tax_rate'] > 100) {
            return false;
        }
        if ($this->container['_tax_rate'] < 0) {
            return false;
        }
        $allowed_values = $this->getTaxTextAllowableValues();
        if (!in_array($this->container['_tax_text'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getTaxTypeAllowableValues();
        if (!in_array($this->container['_tax_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getInvoiceTypeAllowableValues();
        if (!in_array($this->container['_invoice_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets _invoice_number
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['_invoice_number'];
    }

    /**
     * Sets _invoice_number
     * @param string $_invoice_number 
     * @return $this
     */
    public function setInvoiceNumber($_invoice_number)
    {
        $this->container['_invoice_number'] = $_invoice_number;

        return $this;
    }

    /**
     * Gets _contact
     * @return \flagbit\sevdesk\phpclient\Model\ModelContact
     */
    public function getContact()
    {
        return $this->container['_contact'];
    }

    /**
     * Sets _contact
     * @param \flagbit\sevdesk\phpclient\Model\ModelContact $_contact the contact the invoice belongs to
     * @return $this
     */
    public function setContact($_contact)
    {
        $this->container['_contact'] = $_contact;

        return $this;
    }

    /**
     * Gets _create
     * @return \DateTime
     */
    public function getCreate()
    {
        return $this->container['_create'];
    }

    /**
     * Sets _create
     * @param \DateTime $_create the date the invoice was created
     * @return $this
     */
    public function setCreate($_create)
    {
        $this->container['_create'] = $_create;

        return $this;
    }

    /**
     * Gets _update
     * @return \DateTime
     */
    public function getUpdate()
    {
        return $this->container['_update'];
    }

    /**
     * Sets _update
     * @param \DateTime $_update the date the invoice was last updated
     * @return $this
     */
    public function setUpdate($_update)
    {
        $this->container['_update'] = $_update;

        return $this;
    }

    /**
     * Gets _invoice_date
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['_invoice_date'];
    }

    /**
     * Sets _invoice_date
     * @param \DateTime $_invoice_date the date of the invoice
     * @return $this
     */
    public function setInvoiceDate($_invoice_date)
    {
        $this->container['_invoice_date'] = $_invoice_date;

        return $this;
    }

    /**
     * Gets _header
     * @return string
     */
    public function getHeader()
    {
        return $this->container['_header'];
    }

    /**
     * Sets _header
     * @param string $_header header/subject of the invoice
     * @return $this
     */
    public function setHeader($_header)
    {
        $this->container['_header'] = $_header;

        return $this;
    }

    /**
     * Gets _head_text
     * @return string
     */
    public function getHeadText()
    {
        return $this->container['_head_text'];
    }

    /**
     * Sets _head_text
     * @param string $_head_text head text of the invoice
     * @return $this
     */
    public function setHeadText($_head_text)
    {
        $this->container['_head_text'] = $_head_text;

        return $this;
    }

    /**
     * Gets _foot_text
     * @return string
     */
    public function getFootText()
    {
        return $this->container['_foot_text'];
    }

    /**
     * Sets _foot_text
     * @param string $_foot_text foot text of the invoice
     * @return $this
     */
    public function setFootText($_foot_text)
    {
        $this->container['_foot_text'] = $_foot_text;

        return $this;
    }

    /**
     * Gets _time_to_pay
     * @return \DateTime
     */
    public function getTimeToPay()
    {
        return $this->container['_time_to_pay'];
    }

    /**
     * Sets _time_to_pay
     * @param \DateTime $_time_to_pay time left for paying the invoice, use format dd.MM.yyyy or number for number of days left
     * @return $this
     */
    public function setTimeToPay($_time_to_pay)
    {
        $this->container['_time_to_pay'] = $_time_to_pay;

        return $this;
    }

    /**
     * Gets _discount_time
     * @return \DateTime
     */
    public function getDiscountTime()
    {
        return $this->container['_discount_time'];
    }

    /**
     * Sets _discount_time
     * @param \DateTime $_discount_time 
     * @return $this
     */
    public function setDiscountTime($_discount_time)
    {
        $this->container['_discount_time'] = $_discount_time;

        return $this;
    }

    /**
     * Gets _discount
     * @return float
     */
    public function getDiscount()
    {
        return $this->container['_discount'];
    }

    /**
     * Sets _discount
     * @param float $_discount the discount value in '%'
     * @return $this
     */
    public function setDiscount($_discount)
    {
        $this->container['_discount'] = $_discount;

        return $this;
    }

    /**
     * Gets _address_name
     * @return string
     */
    public function getAddressName()
    {
        return $this->container['_address_name'];
    }

    /**
     * Sets _address_name
     * @param string $_address_name the name in the address, equals the contacts name
     * @return $this
     */
    public function setAddressName($_address_name)
    {
        $this->container['_address_name'] = $_address_name;

        return $this;
    }

    /**
     * Gets _address_street
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['_address_street'];
    }

    /**
     * Sets _address_street
     * @param string $_address_street the street in the address, equals the contacts street
     * @return $this
     */
    public function setAddressStreet($_address_street)
    {
        $this->container['_address_street'] = $_address_street;

        return $this;
    }

    /**
     * Gets _address_zip
     * @return string
     */
    public function getAddressZip()
    {
        return $this->container['_address_zip'];
    }

    /**
     * Sets _address_zip
     * @param string $_address_zip the zip-code in the address, equals the contacts zip
     * @return $this
     */
    public function setAddressZip($_address_zip)
    {
        $this->container['_address_zip'] = $_address_zip;

        return $this;
    }

    /**
     * Gets _address_city
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['_address_city'];
    }

    /**
     * Sets _address_city
     * @param string $_address_city the city in the address, equals the contacts city
     * @return $this
     */
    public function setAddressCity($_address_city)
    {
        $this->container['_address_city'] = $_address_city;

        return $this;
    }

    /**
     * Gets _address_country
     * @return \flagbit\sevdesk\phpclient\Model\ModelStaticCountry
     */
    public function getAddressCountry()
    {
        return $this->container['_address_country'];
    }

    /**
     * Sets _address_country
     * @param \flagbit\sevdesk\phpclient\Model\ModelStaticCountry $_address_country the country in the address, equals the contacts country
     * @return $this
     */
    public function setAddressCountry($_address_country)
    {
        $this->container['_address_country'] = $_address_country;

        return $this;
    }

    /**
     * Gets _pay_date
     * @return \DateTime
     */
    public function getPayDate()
    {
        return $this->container['_pay_date'];
    }

    /**
     * Sets _pay_date
     * @param \DateTime $_pay_date time left for paying the invoice, use format DD.MM.YYYY or number for number of days left
     * @return $this
     */
    public function setPayDate($_pay_date)
    {
        $this->container['_pay_date'] = $_pay_date;

        return $this;
    }

    /**
     * Gets _create_user
     * @return \flagbit\sevdesk\phpclient\Model\ModelSevUser
     */
    public function getCreateUser()
    {
        return $this->container['_create_user'];
    }

    /**
     * Sets _create_user
     * @param \flagbit\sevdesk\phpclient\Model\ModelSevUser $_create_user SevUser who created the invoice
     * @return $this
     */
    public function setCreateUser($_create_user)
    {
        $this->container['_create_user'] = $_create_user;

        return $this;
    }

    /**
     * Gets _sev_client
     * @return object
     */
    public function getSevClient()
    {
        return $this->container['_sev_client'];
    }

    /**
     * Sets _sev_client
     * @param object $_sev_client sevClient is the unique id every customer has and is used in nearly all operations
     * @return $this
     */
    public function setSevClient($_sev_client)
    {
        $this->container['_sev_client'] = $_sev_client;

        return $this;
    }

    /**
     * Gets _delivery_date
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['_delivery_date'];
    }

    /**
     * Sets _delivery_date
     * @param \DateTime $_delivery_date delivery date of the goods from the invoice, please use dd.MM.yyyy
     * @return $this
     */
    public function setDeliveryDate($_delivery_date)
    {
        $this->container['_delivery_date'] = $_delivery_date;

        return $this;
    }

    /**
     * Gets _status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['_status'];
    }

    /**
     * Sets _status
     * @param int $_status status of the invoice
     * @return $this
     */
    public function setStatus($_status)
    {
        $this->container['_status'] = $_status;

        return $this;
    }

    /**
     * Gets _small_settlement
     * @return bool
     */
    public function getSmallSettlement()
    {
        return $this->container['_small_settlement'];
    }

    /**
     * Sets _small_settlement
     * @param bool $_small_settlement 
     * @return $this
     */
    public function setSmallSettlement($_small_settlement)
    {
        $this->container['_small_settlement'] = $_small_settlement;

        return $this;
    }

    /**
     * Gets _contact_person
     * @return \flagbit\sevdesk\phpclient\Model\ModelSevUser
     */
    public function getContactPerson()
    {
        return $this->container['_contact_person'];
    }

    /**
     * Sets _contact_person
     * @param \flagbit\sevdesk\phpclient\Model\ModelSevUser $_contact_person SevUser who created the invoice and therefore is the contact person
     * @return $this
     */
    public function setContactPerson($_contact_person)
    {
        $this->container['_contact_person'] = $_contact_person;

        return $this;
    }

    /**
     * Gets _tax_rate
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['_tax_rate'];
    }

    /**
     * Sets _tax_rate
     * @param float $_tax_rate tax rate used when adding a value added tax regulation
     * @return $this
     */
    public function setTaxRate($_tax_rate)
    {

        if (!is_null($_tax_rate) && ($_tax_rate > 100)) {
            throw new \InvalidArgumentException('invalid value for $_tax_rate when calling ModelInvoice., must be smaller than or equal to 100.');
        }
        if (!is_null($_tax_rate) && ($_tax_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $_tax_rate when calling ModelInvoice., must be bigger than or equal to 0.');
        }

        $this->container['_tax_rate'] = $_tax_rate;

        return $this;
    }

    /**
     * Gets _tax_text
     * @return string
     */
    public function getTaxText()
    {
        return $this->container['_tax_text'];
    }

    /**
     * Sets _tax_text
     * @param string $_tax_text additional text when adding a value added tax regulation
     * @return $this
     */
    public function setTaxText($_tax_text)
    {
        $allowed_values = $this->getTaxTextAllowableValues();
        if (!is_null($_tax_text) && !in_array($_tax_text, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for '_tax_text', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['_tax_text'] = $_tax_text;

        return $this;
    }

    /**
     * Gets _dunning_level
     * @return int
     */
    public function getDunningLevel()
    {
        return $this->container['_dunning_level'];
    }

    /**
     * Sets _dunning_level
     * @param int $_dunning_level dunning level of the invoice
     * @return $this
     */
    public function setDunningLevel($_dunning_level)
    {
        $this->container['_dunning_level'] = $_dunning_level;

        return $this;
    }

    /**
     * Gets _address_parent_name
     * @return string
     */
    public function getAddressParentName()
    {
        return $this->container['_address_parent_name'];
    }

    /**
     * Sets _address_parent_name
     * @param string $_address_parent_name name of the contacts address
     * @return $this
     */
    public function setAddressParentName($_address_parent_name)
    {
        $this->container['_address_parent_name'] = $_address_parent_name;

        return $this;
    }

    /**
     * Gets _address_contact_ref
     * @return \flagbit\sevdesk\phpclient\Model\ModelContactAddress
     */
    public function getAddressContactRef()
    {
        return $this->container['_address_contact_ref'];
    }

    /**
     * Sets _address_contact_ref
     * @param \flagbit\sevdesk\phpclient\Model\ModelContactAddress $_address_contact_ref a reference to the contacts address
     * @return $this
     */
    public function setAddressContactRef($_address_contact_ref)
    {
        $this->container['_address_contact_ref'] = $_address_contact_ref;

        return $this;
    }

    /**
     * Gets _tax_type
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['_tax_type'];
    }

    /**
     * Sets _tax_type
     * @param string $_tax_type 
     * @return $this
     */
    public function setTaxType($_tax_type)
    {
        $allowed_values = $this->getTaxTypeAllowableValues();
        if (!is_null($_tax_type) && !in_array($_tax_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for '_tax_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['_tax_type'] = $_tax_type;

        return $this;
    }

    /**
     * Gets _payment_method
     * @return \flagbit\sevdesk\phpclient\Model\ModelPaymentMethod
     */
    public function getPaymentMethod()
    {
        return $this->container['_payment_method'];
    }

    /**
     * Sets _payment_method
     * @param \flagbit\sevdesk\phpclient\Model\ModelPaymentMethod $_payment_method
     * @return $this
     */
    public function setPaymentMethod($_payment_method)
    {
        $this->container['_payment_method'] = $_payment_method;

        return $this;
    }

    /**
     * Gets _cost_centre
     * @return \flagbit\sevdesk\phpclient\Model\ModelCostCentre
     */
    public function getCostCentre()
    {
        return $this->container['_cost_centre'];
    }

    /**
     * Sets _cost_centre
     * @param \flagbit\sevdesk\phpclient\Model\ModelCostCentre $_cost_centre
     * @return $this
     */
    public function setCostCentre($_cost_centre)
    {
        $this->container['_cost_centre'] = $_cost_centre;

        return $this;
    }

    /**
     * Gets _send_date
     * @return \DateTime
     */
    public function getSendDate()
    {
        return $this->container['_send_date'];
    }

    /**
     * Sets _send_date
     * @param \DateTime $_send_date 
     * @return $this
     */
    public function setSendDate($_send_date)
    {
        $this->container['_send_date'] = $_send_date;

        return $this;
    }

    /**
     * Gets _origin
     * @return object
     */
    public function getOrigin()
    {
        return $this->container['_origin'];
    }

    /**
     * Sets _origin
     * @param object $_origin 
     * @return $this
     */
    public function setOrigin($_origin)
    {
        $this->container['_origin'] = $_origin;

        return $this;
    }

    /**
     * Gets _invoice_type
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->container['_invoice_type'];
    }

    /**
     * Sets _invoice_type
     * @param string $_invoice_type type of the invoice
     * @return $this
     */
    public function setInvoiceType($_invoice_type)
    {
        $allowed_values = $this->getInvoiceTypeAllowableValues();
        if (!is_null($_invoice_type) && !in_array($_invoice_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for '_invoice_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['_invoice_type'] = $_invoice_type;

        return $this;
    }

    /**
     * Gets _account_intervall
     * @return int
     */
    public function getAccountIntervall()
    {
        return $this->container['_account_intervall'];
    }

    /**
     * Sets _account_intervall
     * @param int $_account_intervall 
     * @return $this
     */
    public function setAccountIntervall($_account_intervall)
    {
        $this->container['_account_intervall'] = $_account_intervall;

        return $this;
    }

    /**
     * Gets _account_last_invoice
     * @return \DateTime
     */
    public function getAccountLastInvoice()
    {
        return $this->container['_account_last_invoice'];
    }

    /**
     * Sets _account_last_invoice
     * @param \DateTime $_account_last_invoice 
     * @return $this
     */
    public function setAccountLastInvoice($_account_last_invoice)
    {
        $this->container['_account_last_invoice'] = $_account_last_invoice;

        return $this;
    }

    /**
     * Gets _account_next_invoice
     * @return \DateTime
     */
    public function getAccountNextInvoice()
    {
        return $this->container['_account_next_invoice'];
    }

    /**
     * Sets _account_next_invoice
     * @param \DateTime $_account_next_invoice 
     * @return $this
     */
    public function setAccountNextInvoice($_account_next_invoice)
    {
        $this->container['_account_next_invoice'] = $_account_next_invoice;

        return $this;
    }

    /**
     * Gets _reminder_total
     * @return float
     */
    public function getReminderTotal()
    {
        return $this->container['_reminder_total'];
    }

    /**
     * Sets _reminder_total
     * @param float $_reminder_total 
     * @return $this
     */
    public function setReminderTotal($_reminder_total)
    {
        $this->container['_reminder_total'] = $_reminder_total;

        return $this;
    }

    /**
     * Gets _reminder_debit
     * @return float
     */
    public function getReminderDebit()
    {
        return $this->container['_reminder_debit'];
    }

    /**
     * Sets _reminder_debit
     * @param float $_reminder_debit 
     * @return $this
     */
    public function setReminderDebit($_reminder_debit)
    {
        $this->container['_reminder_debit'] = $_reminder_debit;

        return $this;
    }

    /**
     * Gets _reminder_deadline
     * @return \DateTime
     */
    public function getReminderDeadline()
    {
        return $this->container['_reminder_deadline'];
    }

    /**
     * Sets _reminder_deadline
     * @param \DateTime $_reminder_deadline 
     * @return $this
     */
    public function setReminderDeadline($_reminder_deadline)
    {
        $this->container['_reminder_deadline'] = $_reminder_deadline;

        return $this;
    }

    /**
     * Gets _reminder_charge
     * @return float
     */
    public function getReminderCharge()
    {
        return $this->container['_reminder_charge'];
    }

    /**
     * Sets _reminder_charge
     * @param float $_reminder_charge 
     * @return $this
     */
    public function setReminderCharge($_reminder_charge)
    {
        $this->container['_reminder_charge'] = $_reminder_charge;

        return $this;
    }

    /**
     * Gets _address_parent_name2
     * @return string
     */
    public function getAddressParentName2()
    {
        return $this->container['_address_parent_name2'];
    }

    /**
     * Sets _address_parent_name2
     * @param string $_address_parent_name2 
     * @return $this
     */
    public function setAddressParentName2($_address_parent_name2)
    {
        $this->container['_address_parent_name2'] = $_address_parent_name2;

        return $this;
    }

    /**
     * Gets _address_name2
     * @return string
     */
    public function getAddressName2()
    {
        return $this->container['_address_name2'];
    }

    /**
     * Sets _address_name2
     * @param string $_address_name2 
     * @return $this
     */
    public function setAddressName2($_address_name2)
    {
        $this->container['_address_name2'] = $_address_name2;

        return $this;
    }

    /**
     * Gets _tax_set
     * @return \flagbit\sevdesk\phpclient\Model\ModelTaxSet
     */
    public function getTaxSet()
    {
        return $this->container['_tax_set'];
    }

    /**
     * Sets _tax_set
     * @param \flagbit\sevdesk\phpclient\Model\ModelTaxSet $_tax_set
     * @return $this
     */
    public function setTaxSet($_tax_set)
    {
        $this->container['_tax_set'] = $_tax_set;

        return $this;
    }

    /**
     * Gets _address_gender
     * @return string
     */
    public function getAddressGender()
    {
        return $this->container['_address_gender'];
    }

    /**
     * Sets _address_gender
     * @param string $_address_gender 
     * @return $this
     */
    public function setAddressGender($_address_gender)
    {
        $this->container['_address_gender'] = $_address_gender;

        return $this;
    }

    /**
     * Gets _account_end_date
     * @return \DateTime
     */
    public function getAccountEndDate()
    {
        return $this->container['_account_end_date'];
    }

    /**
     * Sets _account_end_date
     * @param \DateTime $_account_end_date 
     * @return $this
     */
    public function setAccountEndDate($_account_end_date)
    {
        $this->container['_account_end_date'] = $_account_end_date;

        return $this;
    }

    /**
     * Gets _address
     * @return string
     */
    public function getAddress()
    {
        return $this->container['_address'];
    }

    /**
     * Sets _address
     * @param string $_address 
     * @return $this
     */
    public function setAddress($_address)
    {
        $this->container['_address'] = $_address;

        return $this;
    }

    /**
     * Gets _currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['_currency'];
    }

    /**
     * Sets _currency
     * @param string $_currency 
     * @return $this
     */
    public function setCurrency($_currency)
    {
        $this->container['_currency'] = $_currency;

        return $this;
    }

    /**
     * Gets _sum_net
     * @return float
     */
    public function getSumNet()
    {
        return $this->container['_sum_net'];
    }

    /**
     * Sets _sum_net
     * @param float $_sum_net 
     * @return $this
     */
    public function setSumNet($_sum_net)
    {
        $this->container['_sum_net'] = $_sum_net;

        return $this;
    }

    /**
     * Gets _sum_tax
     * @return float
     */
    public function getSumTax()
    {
        return $this->container['_sum_tax'];
    }

    /**
     * Sets _sum_tax
     * @param float $_sum_tax 
     * @return $this
     */
    public function setSumTax($_sum_tax)
    {
        $this->container['_sum_tax'] = $_sum_tax;

        return $this;
    }

    /**
     * Gets _sum_gross
     * @return float
     */
    public function getSumGross()
    {
        return $this->container['_sum_gross'];
    }

    /**
     * Sets _sum_gross
     * @param float $_sum_gross 
     * @return $this
     */
    public function setSumGross($_sum_gross)
    {
        $this->container['_sum_gross'] = $_sum_gross;

        return $this;
    }

    /**
     * Gets _sum_discounts
     * @return float
     */
    public function getSumDiscounts()
    {
        return $this->container['_sum_discounts'];
    }

    /**
     * Sets _sum_discounts
     * @param float $_sum_discounts 
     * @return $this
     */
    public function setSumDiscounts($_sum_discounts)
    {
        $this->container['_sum_discounts'] = $_sum_discounts;

        return $this;
    }

    /**
     * Gets _sum_net_foreign_currency
     * @return float
     */
    public function getSumNetForeignCurrency()
    {
        return $this->container['_sum_net_foreign_currency'];
    }

    /**
     * Sets _sum_net_foreign_currency
     * @param float $_sum_net_foreign_currency 
     * @return $this
     */
    public function setSumNetForeignCurrency($_sum_net_foreign_currency)
    {
        $this->container['_sum_net_foreign_currency'] = $_sum_net_foreign_currency;

        return $this;
    }

    /**
     * Gets _sum_tax_foreign_currency
     * @return float
     */
    public function getSumTaxForeignCurrency()
    {
        return $this->container['_sum_tax_foreign_currency'];
    }

    /**
     * Sets _sum_tax_foreign_currency
     * @param float $_sum_tax_foreign_currency 
     * @return $this
     */
    public function setSumTaxForeignCurrency($_sum_tax_foreign_currency)
    {
        $this->container['_sum_tax_foreign_currency'] = $_sum_tax_foreign_currency;

        return $this;
    }

    /**
     * Gets _sum_gross_foreign_currency
     * @return float
     */
    public function getSumGrossForeignCurrency()
    {
        return $this->container['_sum_gross_foreign_currency'];
    }

    /**
     * Sets _sum_gross_foreign_currency
     * @param float $_sum_gross_foreign_currency 
     * @return $this
     */
    public function setSumGrossForeignCurrency($_sum_gross_foreign_currency)
    {
        $this->container['_sum_gross_foreign_currency'] = $_sum_gross_foreign_currency;

        return $this;
    }

    /**
     * Gets _sum_discounts_foreign_currency
     * @return float
     */
    public function getSumDiscountsForeignCurrency()
    {
        return $this->container['_sum_discounts_foreign_currency'];
    }

    /**
     * Sets _sum_discounts_foreign_currency
     * @param float $_sum_discounts_foreign_currency 
     * @return $this
     */
    public function setSumDiscountsForeignCurrency($_sum_discounts_foreign_currency)
    {
        $this->container['_sum_discounts_foreign_currency'] = $_sum_discounts_foreign_currency;

        return $this;
    }

    /**
     * Gets _sum_net_accounting
     * @return float
     */
    public function getSumNetAccounting()
    {
        return $this->container['_sum_net_accounting'];
    }

    /**
     * Sets _sum_net_accounting
     * @param float $_sum_net_accounting 
     * @return $this
     */
    public function setSumNetAccounting($_sum_net_accounting)
    {
        $this->container['_sum_net_accounting'] = $_sum_net_accounting;

        return $this;
    }

    /**
     * Gets _sum_tax_accounting
     * @return float
     */
    public function getSumTaxAccounting()
    {
        return $this->container['_sum_tax_accounting'];
    }

    /**
     * Sets _sum_tax_accounting
     * @param float $_sum_tax_accounting 
     * @return $this
     */
    public function setSumTaxAccounting($_sum_tax_accounting)
    {
        $this->container['_sum_tax_accounting'] = $_sum_tax_accounting;

        return $this;
    }

    /**
     * Gets _sum_gross_accounting
     * @return float
     */
    public function getSumGrossAccounting()
    {
        return $this->container['_sum_gross_accounting'];
    }

    /**
     * Sets _sum_gross_accounting
     * @param float $_sum_gross_accounting 
     * @return $this
     */
    public function setSumGrossAccounting($_sum_gross_accounting)
    {
        $this->container['_sum_gross_accounting'] = $_sum_gross_accounting;

        return $this;
    }

    /**
     * Gets _entry_type
     * @return \flagbit\sevdesk\phpclient\Model\ModelEntryType
     */
    public function getEntryType()
    {
        return $this->container['_entry_type'];
    }

    /**
     * Sets _entry_type
     * @param \flagbit\sevdesk\phpclient\Model\ModelEntryType $_entry_type
     * @return $this
     */
    public function setEntryType($_entry_type)
    {
        $this->container['_entry_type'] = $_entry_type;

        return $this;
    }

    /**
     * Gets _costumer_internal_note
     * @return string
     */
    public function getCostumerInternalNote()
    {
        return $this->container['_costumer_internal_note'];
    }

    /**
     * Sets _costumer_internal_note
     * @param string $_costumer_internal_note 
     * @return $this
     */
    public function setCostumerInternalNote($_costumer_internal_note)
    {
        $this->container['_costumer_internal_note'] = $_costumer_internal_note;

        return $this;
    }

    /**
     * Gets _show_net
     * @return bool
     */
    public function getShowNet()
    {
        return $this->container['_show_net'];
    }

    /**
     * Sets _show_net
     * @param bool $_show_net 
     * @return $this
     */
    public function setShowNet($_show_net)
    {
        $this->container['_show_net'] = $_show_net;

        return $this;
    }

    /**
     * Gets _enshrined
     * @return bool
     */
    public function getEnshrined()
    {
        return $this->container['_enshrined'];
    }

    /**
     * Sets _enshrined
     * @param bool $_enshrined 
     * @return $this
     */
    public function setEnshrined($_enshrined)
    {
        $this->container['_enshrined'] = $_enshrined;

        return $this;
    }

    /**
     * Gets _send_type
     * @return string
     */
    public function getSendType()
    {
        return $this->container['_send_type'];
    }

    /**
     * Sets _send_type
     * @param string $_send_type 
     * @return $this
     */
    public function setSendType($_send_type)
    {
        $this->container['_send_type'] = $_send_type;

        return $this;
    }

    /**
     * Gets _delivery_date_until
     * @return \DateTime
     */
    public function getDeliveryDateUntil()
    {
        return $this->container['_delivery_date_until'];
    }

    /**
     * Sets _delivery_date_until
     * @param \DateTime $_delivery_date_until 
     * @return $this
     */
    public function setDeliveryDateUntil($_delivery_date_until)
    {
        $this->container['_delivery_date_until'] = $_delivery_date_until;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\flagbit\sevdesk\phpclient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\flagbit\sevdesk\phpclient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


