<?php
/**
 * ModelPart
 *
 * PHP version 5
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace flagbit\sevdesk\phpclient\Model;

use \ArrayAccess;

/**
 * ModelPart Class Doc Comment
 *
 * @category    Class
 * @package     flagbit\sevdesk\phpclient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ModelPart implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Model_Part';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => 'int',
        '_create' => '\DateTime',
        '_update' => '\DateTime',
        '_name' => 'string',
        '_part_number' => 'string',
        '_text' => 'string',
        '_category' => '\flagbit\sevdesk\phpclient\Model\ModelCategory',
        '_stock' => 'float',
        '_unity' => '\flagbit\sevdesk\phpclient\Model\ModelUnity',
        '_price_partner' => 'float',
        '_price_customer' => 'float',
        '_price' => 'float',
        '_second_unity' => '\flagbit\sevdesk\phpclient\Model\ModelUnity',
        '_second_unity_factor' => 'float',
        '_sev_client' => 'object',
        '_price_purchase' => 'float',
        '_tax_rate' => 'float',
        '_image' => 'string',
        '_status' => 'int',
        '_characteristics' => 'string',
        '_origin' => '\flagbit\sevdesk\phpclient\Model\ModelPart',
        '_characteristics_string' => 'string',
        '_internal_comment' => 'string',
        '_entry_type' => '\flagbit\sevdesk\phpclient\Model\ModelEntryType',
        '_accounting_type' => '\flagbit\sevdesk\phpclient\Model\ModelAccountingType',
        '_price_net' => 'float',
        '_price_gross' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_id' => null,
        '_create' => 'date-time',
        '_update' => 'date-time',
        '_name' => null,
        '_part_number' => null,
        '_text' => null,
        '_category' => null,
        '_stock' => 'float',
        '_unity' => null,
        '_price_partner' => 'float',
        '_price_customer' => 'float',
        '_price' => 'float',
        '_second_unity' => null,
        '_second_unity_factor' => 'float',
        '_sev_client' => null,
        '_price_purchase' => 'float',
        '_tax_rate' => 'float',
        '_image' => null,
        '_status' => null,
        '_characteristics' => null,
        '_origin' => null,
        '_characteristics_string' => null,
        '_internal_comment' => null,
        '_entry_type' => null,
        '_accounting_type' => null,
        '_price_net' => 'float',
        '_price_gross' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        '_create' => '_create',
        '_update' => '_update',
        '_name' => '_name',
        '_part_number' => '_partNumber',
        '_text' => '_text',
        '_category' => '_category',
        '_stock' => '_stock',
        '_unity' => '_unity',
        '_price_partner' => '_pricePartner',
        '_price_customer' => '_priceCustomer',
        '_price' => '_price',
        '_second_unity' => '_secondUnity',
        '_second_unity_factor' => '_secondUnityFactor',
        '_sev_client' => '_sevClient',
        '_price_purchase' => '_pricePurchase',
        '_tax_rate' => '_taxRate',
        '_image' => '_image',
        '_status' => '_status',
        '_characteristics' => '_characteristics',
        '_origin' => '_origin',
        '_characteristics_string' => '_characteristicsString',
        '_internal_comment' => '_internalComment',
        '_entry_type' => '_entryType',
        '_accounting_type' => '_accountingType',
        '_price_net' => '_priceNet',
        '_price_gross' => '_priceGross'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        '_create' => 'setCreate',
        '_update' => 'setUpdate',
        '_name' => 'setName',
        '_part_number' => 'setPartNumber',
        '_text' => 'setText',
        '_category' => 'setCategory',
        '_stock' => 'setStock',
        '_unity' => 'setUnity',
        '_price_partner' => 'setPricePartner',
        '_price_customer' => 'setPriceCustomer',
        '_price' => 'setPrice',
        '_second_unity' => 'setSecondUnity',
        '_second_unity_factor' => 'setSecondUnityFactor',
        '_sev_client' => 'setSevClient',
        '_price_purchase' => 'setPricePurchase',
        '_tax_rate' => 'setTaxRate',
        '_image' => 'setImage',
        '_status' => 'setStatus',
        '_characteristics' => 'setCharacteristics',
        '_origin' => 'setOrigin',
        '_characteristics_string' => 'setCharacteristicsString',
        '_internal_comment' => 'setInternalComment',
        '_entry_type' => 'setEntryType',
        '_accounting_type' => 'setAccountingType',
        '_price_net' => 'setPriceNet',
        '_price_gross' => 'setPriceGross'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        '_create' => 'getCreate',
        '_update' => 'getUpdate',
        '_name' => 'getName',
        '_part_number' => 'getPartNumber',
        '_text' => 'getText',
        '_category' => 'getCategory',
        '_stock' => 'getStock',
        '_unity' => 'getUnity',
        '_price_partner' => 'getPricePartner',
        '_price_customer' => 'getPriceCustomer',
        '_price' => 'getPrice',
        '_second_unity' => 'getSecondUnity',
        '_second_unity_factor' => 'getSecondUnityFactor',
        '_sev_client' => 'getSevClient',
        '_price_purchase' => 'getPricePurchase',
        '_tax_rate' => 'getTaxRate',
        '_image' => 'getImage',
        '_status' => 'getStatus',
        '_characteristics' => 'getCharacteristics',
        '_origin' => 'getOrigin',
        '_characteristics_string' => 'getCharacteristicsString',
        '_internal_comment' => 'getInternalComment',
        '_entry_type' => 'getEntryType',
        '_accounting_type' => 'getAccountingType',
        '_price_net' => 'getPriceNet',
        '_price_gross' => 'getPriceGross'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['_create'] = isset($data['_create']) ? $data['_create'] : null;
        $this->container['_update'] = isset($data['_update']) ? $data['_update'] : null;
        $this->container['_name'] = isset($data['_name']) ? $data['_name'] : null;
        $this->container['_part_number'] = isset($data['_part_number']) ? $data['_part_number'] : null;
        $this->container['_text'] = isset($data['_text']) ? $data['_text'] : null;
        $this->container['_category'] = isset($data['_category']) ? $data['_category'] : null;
        $this->container['_stock'] = isset($data['_stock']) ? $data['_stock'] : null;
        $this->container['_unity'] = isset($data['_unity']) ? $data['_unity'] : null;
        $this->container['_price_partner'] = isset($data['_price_partner']) ? $data['_price_partner'] : null;
        $this->container['_price_customer'] = isset($data['_price_customer']) ? $data['_price_customer'] : null;
        $this->container['_price'] = isset($data['_price']) ? $data['_price'] : null;
        $this->container['_second_unity'] = isset($data['_second_unity']) ? $data['_second_unity'] : null;
        $this->container['_second_unity_factor'] = isset($data['_second_unity_factor']) ? $data['_second_unity_factor'] : null;
        $this->container['_sev_client'] = isset($data['_sev_client']) ? $data['_sev_client'] : null;
        $this->container['_price_purchase'] = isset($data['_price_purchase']) ? $data['_price_purchase'] : null;
        $this->container['_tax_rate'] = isset($data['_tax_rate']) ? $data['_tax_rate'] : null;
        $this->container['_image'] = isset($data['_image']) ? $data['_image'] : null;
        $this->container['_status'] = isset($data['_status']) ? $data['_status'] : null;
        $this->container['_characteristics'] = isset($data['_characteristics']) ? $data['_characteristics'] : null;
        $this->container['_origin'] = isset($data['_origin']) ? $data['_origin'] : null;
        $this->container['_characteristics_string'] = isset($data['_characteristics_string']) ? $data['_characteristics_string'] : null;
        $this->container['_internal_comment'] = isset($data['_internal_comment']) ? $data['_internal_comment'] : null;
        $this->container['_entry_type'] = isset($data['_entry_type']) ? $data['_entry_type'] : null;
        $this->container['_accounting_type'] = isset($data['_accounting_type']) ? $data['_accounting_type'] : null;
        $this->container['_price_net'] = isset($data['_price_net']) ? $data['_price_net'] : null;
        $this->container['_price_gross'] = isset($data['_price_gross']) ? $data['_price_gross'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }

    /**
     * Gets _id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param int $_id
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets _create
     * @return \DateTime
     */
    public function getCreate()
    {
        return $this->container['_create'];
    }

    /**
     * Sets _create
     * @param \DateTime $_create date the part was created
     * @return $this
     */
    public function setCreate($_create)
    {
        $this->container['_create'] = $_create;

        return $this;
    }

    /**
     * Gets _update
     * @return \DateTime
     */
    public function getUpdate()
    {
        return $this->container['_update'];
    }

    /**
     * Sets _update
     * @param \DateTime $_update date the part was last updated
     * @return $this
     */
    public function setUpdate($_update)
    {
        $this->container['_update'] = $_update;

        return $this;
    }

    /**
     * Gets _name
     * @return string
     */
    public function getName()
    {
        return $this->container['_name'];
    }

    /**
     * Sets _name
     * @param string $_name name of the part
     * @return $this
     */
    public function setName($_name)
    {
        $this->container['_name'] = $_name;

        return $this;
    }

    /**
     * Gets _part_number
     * @return string
     */
    public function getPartNumber()
    {
        return $this->container['_part_number'];
    }

    /**
     * Sets _part_number
     * @param string $_part_number 
     * @return $this
     */
    public function setPartNumber($_part_number)
    {
        $this->container['_part_number'] = $_part_number;

        return $this;
    }

    /**
     * Gets _text
     * @return string
     */
    public function getText()
    {
        return $this->container['_text'];
    }

    /**
     * Sets _text
     * @param string $_text 
     * @return $this
     */
    public function setText($_text)
    {
        $this->container['_text'] = $_text;

        return $this;
    }

    /**
     * Gets _category
     * @return \flagbit\sevdesk\phpclient\Model\ModelCategory
     */
    public function getCategory()
    {
        return $this->container['_category'];
    }

    /**
     * Sets _category
     * @param \flagbit\sevdesk\phpclient\Model\ModelCategory $_category
     * @return $this
     */
    public function setCategory($_category)
    {
        $this->container['_category'] = $_category;

        return $this;
    }

    /**
     * Gets _stock
     * @return float
     */
    public function getStock()
    {
        return $this->container['_stock'];
    }

    /**
     * Sets _stock
     * @param float $_stock 
     * @return $this
     */
    public function setStock($_stock)
    {
        $this->container['_stock'] = $_stock;

        return $this;
    }

    /**
     * Gets _unity
     * @return \flagbit\sevdesk\phpclient\Model\ModelUnity
     */
    public function getUnity()
    {
        return $this->container['_unity'];
    }

    /**
     * Sets _unity
     * @param \flagbit\sevdesk\phpclient\Model\ModelUnity $_unity unity of the part, references Unity.php
     * @return $this
     */
    public function setUnity($_unity)
    {
        $this->container['_unity'] = $_unity;

        return $this;
    }

    /**
     * Gets _price_partner
     * @return float
     */
    public function getPricePartner()
    {
        return $this->container['_price_partner'];
    }

    /**
     * Sets _price_partner
     * @param float $_price_partner price for a partner. Can be added via the options in the inventory where the part is displayed
     * @return $this
     */
    public function setPricePartner($_price_partner)
    {
        $this->container['_price_partner'] = $_price_partner;

        return $this;
    }

    /**
     * Gets _price_customer
     * @return float
     */
    public function getPriceCustomer()
    {
        return $this->container['_price_customer'];
    }

    /**
     * Sets _price_customer
     * @param float $_price_customer price for a customer. Can be added via the options in the inventory where the part is displayed
     * @return $this
     */
    public function setPriceCustomer($_price_customer)
    {
        $this->container['_price_customer'] = $_price_customer;

        return $this;
    }

    /**
     * Gets _price
     * @return float
     */
    public function getPrice()
    {
        return $this->container['_price'];
    }

    /**
     * Sets _price
     * @param float $_price price of the part
     * @return $this
     */
    public function setPrice($_price)
    {
        $this->container['_price'] = $_price;

        return $this;
    }

    /**
     * Gets _second_unity
     * @return \flagbit\sevdesk\phpclient\Model\ModelUnity
     */
    public function getSecondUnity()
    {
        return $this->container['_second_unity'];
    }

    /**
     * Sets _second_unity
     * @param \flagbit\sevdesk\phpclient\Model\ModelUnity $_second_unity a second unity which can be added to the part
     * @return $this
     */
    public function setSecondUnity($_second_unity)
    {
        $this->container['_second_unity'] = $_second_unity;

        return $this;
    }

    /**
     * Gets _second_unity_factor
     * @return float
     */
    public function getSecondUnityFactor()
    {
        return $this->container['_second_unity_factor'];
    }

    /**
     * Sets _second_unity_factor
     * @param float $_second_unity_factor factor for the second unity resulting in a new sumNet for the secondUnity
     * @return $this
     */
    public function setSecondUnityFactor($_second_unity_factor)
    {
        $this->container['_second_unity_factor'] = $_second_unity_factor;

        return $this;
    }

    /**
     * Gets _sev_client
     * @return object
     */
    public function getSevClient()
    {
        return $this->container['_sev_client'];
    }

    /**
     * Sets _sev_client
     * @param object $_sev_client sevClient is the unique id every customer has and is used in nearly all operations
     * @return $this
     */
    public function setSevClient($_sev_client)
    {
        $this->container['_sev_client'] = $_sev_client;

        return $this;
    }

    /**
     * Gets _price_purchase
     * @return float
     */
    public function getPricePurchase()
    {
        return $this->container['_price_purchase'];
    }

    /**
     * Sets _price_purchase
     * @param float $_price_purchase 
     * @return $this
     */
    public function setPricePurchase($_price_purchase)
    {
        $this->container['_price_purchase'] = $_price_purchase;

        return $this;
    }

    /**
     * Gets _tax_rate
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['_tax_rate'];
    }

    /**
     * Sets _tax_rate
     * @param float $_tax_rate 
     * @return $this
     */
    public function setTaxRate($_tax_rate)
    {
        $this->container['_tax_rate'] = $_tax_rate;

        return $this;
    }

    /**
     * Gets _image
     * @return string
     */
    public function getImage()
    {
        return $this->container['_image'];
    }

    /**
     * Sets _image
     * @param string $_image 
     * @return $this
     */
    public function setImage($_image)
    {
        $this->container['_image'] = $_image;

        return $this;
    }

    /**
     * Gets _status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['_status'];
    }

    /**
     * Sets _status
     * @param int $_status 
     * @return $this
     */
    public function setStatus($_status)
    {
        $this->container['_status'] = $_status;

        return $this;
    }

    /**
     * Gets _characteristics
     * @return string
     */
    public function getCharacteristics()
    {
        return $this->container['_characteristics'];
    }

    /**
     * Sets _characteristics
     * @param string $_characteristics characteristics of the part
     * @return $this
     */
    public function setCharacteristics($_characteristics)
    {
        $this->container['_characteristics'] = $_characteristics;

        return $this;
    }

    /**
     * Gets _origin
     * @return \flagbit\sevdesk\phpclient\Model\ModelPart
     */
    public function getOrigin()
    {
        return $this->container['_origin'];
    }

    /**
     * Sets _origin
     * @param \flagbit\sevdesk\phpclient\Model\ModelPart $_origin
     * @return $this
     */
    public function setOrigin($_origin)
    {
        $this->container['_origin'] = $_origin;

        return $this;
    }

    /**
     * Gets _characteristics_string
     * @return string
     */
    public function getCharacteristicsString()
    {
        return $this->container['_characteristics_string'];
    }

    /**
     * Sets _characteristics_string
     * @param string $_characteristics_string 
     * @return $this
     */
    public function setCharacteristicsString($_characteristics_string)
    {
        $this->container['_characteristics_string'] = $_characteristics_string;

        return $this;
    }

    /**
     * Gets _internal_comment
     * @return string
     */
    public function getInternalComment()
    {
        return $this->container['_internal_comment'];
    }

    /**
     * Sets _internal_comment
     * @param string $_internal_comment 
     * @return $this
     */
    public function setInternalComment($_internal_comment)
    {
        $this->container['_internal_comment'] = $_internal_comment;

        return $this;
    }

    /**
     * Gets _entry_type
     * @return \flagbit\sevdesk\phpclient\Model\ModelEntryType
     */
    public function getEntryType()
    {
        return $this->container['_entry_type'];
    }

    /**
     * Sets _entry_type
     * @param \flagbit\sevdesk\phpclient\Model\ModelEntryType $_entry_type
     * @return $this
     */
    public function setEntryType($_entry_type)
    {
        $this->container['_entry_type'] = $_entry_type;

        return $this;
    }

    /**
     * Gets _accounting_type
     * @return \flagbit\sevdesk\phpclient\Model\ModelAccountingType
     */
    public function getAccountingType()
    {
        return $this->container['_accounting_type'];
    }

    /**
     * Sets _accounting_type
     * @param \flagbit\sevdesk\phpclient\Model\ModelAccountingType $_accounting_type
     * @return $this
     */
    public function setAccountingType($_accounting_type)
    {
        $this->container['_accounting_type'] = $_accounting_type;

        return $this;
    }

    /**
     * Gets _price_net
     * @return float
     */
    public function getPriceNet()
    {
        return $this->container['_price_net'];
    }

    /**
     * Sets _price_net
     * @param float $_price_net 
     * @return $this
     */
    public function setPriceNet($_price_net)
    {
        $this->container['_price_net'] = $_price_net;

        return $this;
    }

    /**
     * Gets _price_gross
     * @return float
     */
    public function getPriceGross()
    {
        return $this->container['_price_gross'];
    }

    /**
     * Sets _price_gross
     * @param float $_price_gross 
     * @return $this
     */
    public function setPriceGross($_price_gross)
    {
        $this->container['_price_gross'] = $_price_gross;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\flagbit\sevdesk\phpclient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\flagbit\sevdesk\phpclient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


