<?php
/**
 * ModelVoucher
 *
 * PHP version 5
 *
 * @category Class
 * @package  flagbit\sevdesk\phpclient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace flagbit\sevdesk\phpclient\Model;

use \ArrayAccess;

/**
 * ModelVoucher Class Doc Comment
 *
 * @category    Class
 * @package     flagbit\sevdesk\phpclient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ModelVoucher implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Model_Voucher';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_create' => '\DateTime',
        '_update' => '\DateTime',
        '_sev_client' => 'object',
        '_create_user' => '\flagbit\sevdesk\phpclient\Model\ModelSevUser',
        '_voucher_date' => '\DateTime',
        '_supplier' => '\flagbit\sevdesk\phpclient\Model\ModelContact',
        '_supplier_name' => 'string',
        '_description' => 'string',
        '_document' => '\flagbit\sevdesk\phpclient\Model\ModelDocument',
        '_result_disdar' => 'string',
        '_document_preview' => '\flagbit\sevdesk\phpclient\Model\ModelDocument',
        '_pay_date' => '\DateTime',
        '_status' => 'int',
        '_object' => 'object',
        '_sum_net' => 'float',
        '_sum_tax' => 'float',
        '_sum_gross' => 'float',
        '_sum_net_accounting' => 'float',
        '_sum_tax_accounting' => 'float',
        '_sum_gross_accounting' => 'float',
        '_tax_type' => 'string',
        '_credit_debit' => 'string',
        '_hidden' => 'bool',
        '_cost_centre' => '\flagbit\sevdesk\phpclient\Model\ModelCostCentre',
        '_origin' => 'object',
        '_voucher_type' => 'string',
        '_recurring_intervall' => 'int',
        '_recurring_start_date' => '\DateTime',
        '_recurring_next_voucher' => '\DateTime',
        '_recurring_last_voucher' => '\DateTime',
        '_recurring_end_date' => '\DateTime',
        '_enshrined' => 'bool',
        '_in_source' => 'string',
        '_tax_set' => '\flagbit\sevdesk\phpclient\Model\ModelTaxSet',
        '_iban' => 'string',
        '_accounting_special_case' => 'string',
        '_payment_deadline' => '\DateTime',
        '_tip' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_create' => 'date-time',
        '_update' => 'date-time',
        '_sev_client' => null,
        '_create_user' => null,
        '_voucher_date' => 'date-time',
        '_supplier' => null,
        '_supplier_name' => null,
        '_description' => null,
        '_document' => null,
        '_result_disdar' => null,
        '_document_preview' => null,
        '_pay_date' => 'date-time',
        '_status' => null,
        '_object' => null,
        '_sum_net' => 'float',
        '_sum_tax' => 'float',
        '_sum_gross' => 'float',
        '_sum_net_accounting' => 'float',
        '_sum_tax_accounting' => 'float',
        '_sum_gross_accounting' => 'float',
        '_tax_type' => null,
        '_credit_debit' => null,
        '_hidden' => null,
        '_cost_centre' => null,
        '_origin' => null,
        '_voucher_type' => null,
        '_recurring_intervall' => null,
        '_recurring_start_date' => 'date-time',
        '_recurring_next_voucher' => 'date-time',
        '_recurring_last_voucher' => 'date-time',
        '_recurring_end_date' => 'date-time',
        '_enshrined' => null,
        '_in_source' => null,
        '_tax_set' => null,
        '_iban' => null,
        '_accounting_special_case' => null,
        '_payment_deadline' => 'date-time',
        '_tip' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        '_create' => '_create',
        '_update' => '_update',
        '_sev_client' => '_sevClient',
        '_create_user' => '_createUser',
        '_voucher_date' => '_voucherDate',
        '_supplier' => '_supplier',
        '_supplier_name' => '_supplierName',
        '_description' => '_description',
        '_document' => '_document',
        '_result_disdar' => '_resultDisdar',
        '_document_preview' => '_documentPreview',
        '_pay_date' => '_payDate',
        '_status' => '_status',
        '_object' => '_object',
        '_sum_net' => '_sumNet',
        '_sum_tax' => '_sumTax',
        '_sum_gross' => '_sumGross',
        '_sum_net_accounting' => '_sumNetAccounting',
        '_sum_tax_accounting' => '_sumTaxAccounting',
        '_sum_gross_accounting' => '_sumGrossAccounting',
        '_tax_type' => '_taxType',
        '_credit_debit' => '_creditDebit',
        '_hidden' => '_hidden',
        '_cost_centre' => '_costCentre',
        '_origin' => '_origin',
        '_voucher_type' => '_voucherType',
        '_recurring_intervall' => '_recurringIntervall',
        '_recurring_start_date' => '_recurringStartDate',
        '_recurring_next_voucher' => '_recurringNextVoucher',
        '_recurring_last_voucher' => '_recurringLastVoucher',
        '_recurring_end_date' => '_recurringEndDate',
        '_enshrined' => '_enshrined',
        '_in_source' => '_inSource',
        '_tax_set' => '_taxSet',
        '_iban' => '_iban',
        '_accounting_special_case' => '_accountingSpecialCase',
        '_payment_deadline' => '_paymentDeadline',
        '_tip' => '_tip'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        '_create' => 'setCreate',
        '_update' => 'setUpdate',
        '_sev_client' => 'setSevClient',
        '_create_user' => 'setCreateUser',
        '_voucher_date' => 'setVoucherDate',
        '_supplier' => 'setSupplier',
        '_supplier_name' => 'setSupplierName',
        '_description' => 'setDescription',
        '_document' => 'setDocument',
        '_result_disdar' => 'setResultDisdar',
        '_document_preview' => 'setDocumentPreview',
        '_pay_date' => 'setPayDate',
        '_status' => 'setStatus',
        '_object' => 'setObject',
        '_sum_net' => 'setSumNet',
        '_sum_tax' => 'setSumTax',
        '_sum_gross' => 'setSumGross',
        '_sum_net_accounting' => 'setSumNetAccounting',
        '_sum_tax_accounting' => 'setSumTaxAccounting',
        '_sum_gross_accounting' => 'setSumGrossAccounting',
        '_tax_type' => 'setTaxType',
        '_credit_debit' => 'setCreditDebit',
        '_hidden' => 'setHidden',
        '_cost_centre' => 'setCostCentre',
        '_origin' => 'setOrigin',
        '_voucher_type' => 'setVoucherType',
        '_recurring_intervall' => 'setRecurringIntervall',
        '_recurring_start_date' => 'setRecurringStartDate',
        '_recurring_next_voucher' => 'setRecurringNextVoucher',
        '_recurring_last_voucher' => 'setRecurringLastVoucher',
        '_recurring_end_date' => 'setRecurringEndDate',
        '_enshrined' => 'setEnshrined',
        '_in_source' => 'setInSource',
        '_tax_set' => 'setTaxSet',
        '_iban' => 'setIban',
        '_accounting_special_case' => 'setAccountingSpecialCase',
        '_payment_deadline' => 'setPaymentDeadline',
        '_tip' => 'setTip'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        '_create' => 'getCreate',
        '_update' => 'getUpdate',
        '_sev_client' => 'getSevClient',
        '_create_user' => 'getCreateUser',
        '_voucher_date' => 'getVoucherDate',
        '_supplier' => 'getSupplier',
        '_supplier_name' => 'getSupplierName',
        '_description' => 'getDescription',
        '_document' => 'getDocument',
        '_result_disdar' => 'getResultDisdar',
        '_document_preview' => 'getDocumentPreview',
        '_pay_date' => 'getPayDate',
        '_status' => 'getStatus',
        '_object' => 'getObject',
        '_sum_net' => 'getSumNet',
        '_sum_tax' => 'getSumTax',
        '_sum_gross' => 'getSumGross',
        '_sum_net_accounting' => 'getSumNetAccounting',
        '_sum_tax_accounting' => 'getSumTaxAccounting',
        '_sum_gross_accounting' => 'getSumGrossAccounting',
        '_tax_type' => 'getTaxType',
        '_credit_debit' => 'getCreditDebit',
        '_hidden' => 'getHidden',
        '_cost_centre' => 'getCostCentre',
        '_origin' => 'getOrigin',
        '_voucher_type' => 'getVoucherType',
        '_recurring_intervall' => 'getRecurringIntervall',
        '_recurring_start_date' => 'getRecurringStartDate',
        '_recurring_next_voucher' => 'getRecurringNextVoucher',
        '_recurring_last_voucher' => 'getRecurringLastVoucher',
        '_recurring_end_date' => 'getRecurringEndDate',
        '_enshrined' => 'getEnshrined',
        '_in_source' => 'getInSource',
        '_tax_set' => 'getTaxSet',
        '_iban' => 'getIban',
        '_accounting_special_case' => 'getAccountingSpecialCase',
        '_payment_deadline' => 'getPaymentDeadline',
        '_tip' => 'getTip'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_create'] = isset($data['_create']) ? $data['_create'] : null;
        $this->container['_update'] = isset($data['_update']) ? $data['_update'] : null;
        $this->container['_sev_client'] = isset($data['_sev_client']) ? $data['_sev_client'] : null;
        $this->container['_create_user'] = isset($data['_create_user']) ? $data['_create_user'] : null;
        $this->container['_voucher_date'] = isset($data['_voucher_date']) ? $data['_voucher_date'] : null;
        $this->container['_supplier'] = isset($data['_supplier']) ? $data['_supplier'] : null;
        $this->container['_supplier_name'] = isset($data['_supplier_name']) ? $data['_supplier_name'] : null;
        $this->container['_description'] = isset($data['_description']) ? $data['_description'] : null;
        $this->container['_document'] = isset($data['_document']) ? $data['_document'] : null;
        $this->container['_result_disdar'] = isset($data['_result_disdar']) ? $data['_result_disdar'] : null;
        $this->container['_document_preview'] = isset($data['_document_preview']) ? $data['_document_preview'] : null;
        $this->container['_pay_date'] = isset($data['_pay_date']) ? $data['_pay_date'] : null;
        $this->container['_status'] = isset($data['_status']) ? $data['_status'] : null;
        $this->container['_object'] = isset($data['_object']) ? $data['_object'] : null;
        $this->container['_sum_net'] = isset($data['_sum_net']) ? $data['_sum_net'] : 0.0;
        $this->container['_sum_tax'] = isset($data['_sum_tax']) ? $data['_sum_tax'] : 0.0;
        $this->container['_sum_gross'] = isset($data['_sum_gross']) ? $data['_sum_gross'] : 0.0;
        $this->container['_sum_net_accounting'] = isset($data['_sum_net_accounting']) ? $data['_sum_net_accounting'] : 0.0;
        $this->container['_sum_tax_accounting'] = isset($data['_sum_tax_accounting']) ? $data['_sum_tax_accounting'] : 0.0;
        $this->container['_sum_gross_accounting'] = isset($data['_sum_gross_accounting']) ? $data['_sum_gross_accounting'] : 0.0;
        $this->container['_tax_type'] = isset($data['_tax_type']) ? $data['_tax_type'] : null;
        $this->container['_credit_debit'] = isset($data['_credit_debit']) ? $data['_credit_debit'] : null;
        $this->container['_hidden'] = isset($data['_hidden']) ? $data['_hidden'] : null;
        $this->container['_cost_centre'] = isset($data['_cost_centre']) ? $data['_cost_centre'] : null;
        $this->container['_origin'] = isset($data['_origin']) ? $data['_origin'] : null;
        $this->container['_voucher_type'] = isset($data['_voucher_type']) ? $data['_voucher_type'] : null;
        $this->container['_recurring_intervall'] = isset($data['_recurring_intervall']) ? $data['_recurring_intervall'] : null;
        $this->container['_recurring_start_date'] = isset($data['_recurring_start_date']) ? $data['_recurring_start_date'] : null;
        $this->container['_recurring_next_voucher'] = isset($data['_recurring_next_voucher']) ? $data['_recurring_next_voucher'] : null;
        $this->container['_recurring_last_voucher'] = isset($data['_recurring_last_voucher']) ? $data['_recurring_last_voucher'] : null;
        $this->container['_recurring_end_date'] = isset($data['_recurring_end_date']) ? $data['_recurring_end_date'] : null;
        $this->container['_enshrined'] = isset($data['_enshrined']) ? $data['_enshrined'] : null;
        $this->container['_in_source'] = isset($data['_in_source']) ? $data['_in_source'] : null;
        $this->container['_tax_set'] = isset($data['_tax_set']) ? $data['_tax_set'] : null;
        $this->container['_iban'] = isset($data['_iban']) ? $data['_iban'] : null;
        $this->container['_accounting_special_case'] = isset($data['_accounting_special_case']) ? $data['_accounting_special_case'] : null;
        $this->container['_payment_deadline'] = isset($data['_payment_deadline']) ? $data['_payment_deadline'] : null;
        $this->container['_tip'] = isset($data['_tip']) ? $data['_tip'] : 0.0;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets _create
     * @return \DateTime
     */
    public function getCreate()
    {
        return $this->container['_create'];
    }

    /**
     * Sets _create
     * @param \DateTime $_create date the voucher was created
     * @return $this
     */
    public function setCreate($_create)
    {
        $this->container['_create'] = $_create;

        return $this;
    }

    /**
     * Gets _update
     * @return \DateTime
     */
    public function getUpdate()
    {
        return $this->container['_update'];
    }

    /**
     * Sets _update
     * @param \DateTime $_update date the voucher was last updated
     * @return $this
     */
    public function setUpdate($_update)
    {
        $this->container['_update'] = $_update;

        return $this;
    }

    /**
     * Gets _sev_client
     * @return object
     */
    public function getSevClient()
    {
        return $this->container['_sev_client'];
    }

    /**
     * Sets _sev_client
     * @param object $_sev_client sevClient is the unique id every customer has and is used in nearly all operations
     * @return $this
     */
    public function setSevClient($_sev_client)
    {
        $this->container['_sev_client'] = $_sev_client;

        return $this;
    }

    /**
     * Gets _create_user
     * @return \flagbit\sevdesk\phpclient\Model\ModelSevUser
     */
    public function getCreateUser()
    {
        return $this->container['_create_user'];
    }

    /**
     * Sets _create_user
     * @param \flagbit\sevdesk\phpclient\Model\ModelSevUser $_create_user sevUser who created the voucher
     * @return $this
     */
    public function setCreateUser($_create_user)
    {
        $this->container['_create_user'] = $_create_user;

        return $this;
    }

    /**
     * Gets _voucher_date
     * @return \DateTime
     */
    public function getVoucherDate()
    {
        return $this->container['_voucher_date'];
    }

    /**
     * Sets _voucher_date
     * @param \DateTime $_voucher_date 
     * @return $this
     */
    public function setVoucherDate($_voucher_date)
    {
        $this->container['_voucher_date'] = $_voucher_date;

        return $this;
    }

    /**
     * Gets _supplier
     * @return \flagbit\sevdesk\phpclient\Model\ModelContact
     */
    public function getSupplier()
    {
        return $this->container['_supplier'];
    }

    /**
     * Sets _supplier
     * @param \flagbit\sevdesk\phpclient\Model\ModelContact $_supplier
     * @return $this
     */
    public function setSupplier($_supplier)
    {
        $this->container['_supplier'] = $_supplier;

        return $this;
    }

    /**
     * Gets _supplier_name
     * @return string
     */
    public function getSupplierName()
    {
        return $this->container['_supplier_name'];
    }

    /**
     * Sets _supplier_name
     * @param string $_supplier_name 
     * @return $this
     */
    public function setSupplierName($_supplier_name)
    {
        $this->container['_supplier_name'] = $_supplier_name;

        return $this;
    }

    /**
     * Gets _description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['_description'];
    }

    /**
     * Sets _description
     * @param string $_description 
     * @return $this
     */
    public function setDescription($_description)
    {
        $this->container['_description'] = $_description;

        return $this;
    }

    /**
     * Gets _document
     * @return \flagbit\sevdesk\phpclient\Model\ModelDocument
     */
    public function getDocument()
    {
        return $this->container['_document'];
    }

    /**
     * Sets _document
     * @param \flagbit\sevdesk\phpclient\Model\ModelDocument $_document
     * @return $this
     */
    public function setDocument($_document)
    {
        $this->container['_document'] = $_document;

        return $this;
    }

    /**
     * Gets _result_disdar
     * @return string
     */
    public function getResultDisdar()
    {
        return $this->container['_result_disdar'];
    }

    /**
     * Sets _result_disdar
     * @param string $_result_disdar 
     * @return $this
     */
    public function setResultDisdar($_result_disdar)
    {
        $this->container['_result_disdar'] = $_result_disdar;

        return $this;
    }

    /**
     * Gets _document_preview
     * @return \flagbit\sevdesk\phpclient\Model\ModelDocument
     */
    public function getDocumentPreview()
    {
        return $this->container['_document_preview'];
    }

    /**
     * Sets _document_preview
     * @param \flagbit\sevdesk\phpclient\Model\ModelDocument $_document_preview
     * @return $this
     */
    public function setDocumentPreview($_document_preview)
    {
        $this->container['_document_preview'] = $_document_preview;

        return $this;
    }

    /**
     * Gets _pay_date
     * @return \DateTime
     */
    public function getPayDate()
    {
        return $this->container['_pay_date'];
    }

    /**
     * Sets _pay_date
     * @param \DateTime $_pay_date 
     * @return $this
     */
    public function setPayDate($_pay_date)
    {
        $this->container['_pay_date'] = $_pay_date;

        return $this;
    }

    /**
     * Gets _status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['_status'];
    }

    /**
     * Sets _status
     * @param int $_status 
     * @return $this
     */
    public function setStatus($_status)
    {
        $this->container['_status'] = $_status;

        return $this;
    }

    /**
     * Gets _object
     * @return object
     */
    public function getObject()
    {
        return $this->container['_object'];
    }

    /**
     * Sets _object
     * @param object $_object 
     * @return $this
     */
    public function setObject($_object)
    {
        $this->container['_object'] = $_object;

        return $this;
    }

    /**
     * Gets _sum_net
     * @return float
     */
    public function getSumNet()
    {
        return $this->container['_sum_net'];
    }

    /**
     * Sets _sum_net
     * @param float $_sum_net 
     * @return $this
     */
    public function setSumNet($_sum_net)
    {
        $this->container['_sum_net'] = $_sum_net;

        return $this;
    }

    /**
     * Gets _sum_tax
     * @return float
     */
    public function getSumTax()
    {
        return $this->container['_sum_tax'];
    }

    /**
     * Sets _sum_tax
     * @param float $_sum_tax 
     * @return $this
     */
    public function setSumTax($_sum_tax)
    {
        $this->container['_sum_tax'] = $_sum_tax;

        return $this;
    }

    /**
     * Gets _sum_gross
     * @return float
     */
    public function getSumGross()
    {
        return $this->container['_sum_gross'];
    }

    /**
     * Sets _sum_gross
     * @param float $_sum_gross 
     * @return $this
     */
    public function setSumGross($_sum_gross)
    {
        $this->container['_sum_gross'] = $_sum_gross;

        return $this;
    }

    /**
     * Gets _sum_net_accounting
     * @return float
     */
    public function getSumNetAccounting()
    {
        return $this->container['_sum_net_accounting'];
    }

    /**
     * Sets _sum_net_accounting
     * @param float $_sum_net_accounting 
     * @return $this
     */
    public function setSumNetAccounting($_sum_net_accounting)
    {
        $this->container['_sum_net_accounting'] = $_sum_net_accounting;

        return $this;
    }

    /**
     * Gets _sum_tax_accounting
     * @return float
     */
    public function getSumTaxAccounting()
    {
        return $this->container['_sum_tax_accounting'];
    }

    /**
     * Sets _sum_tax_accounting
     * @param float $_sum_tax_accounting 
     * @return $this
     */
    public function setSumTaxAccounting($_sum_tax_accounting)
    {
        $this->container['_sum_tax_accounting'] = $_sum_tax_accounting;

        return $this;
    }

    /**
     * Gets _sum_gross_accounting
     * @return float
     */
    public function getSumGrossAccounting()
    {
        return $this->container['_sum_gross_accounting'];
    }

    /**
     * Sets _sum_gross_accounting
     * @param float $_sum_gross_accounting 
     * @return $this
     */
    public function setSumGrossAccounting($_sum_gross_accounting)
    {
        $this->container['_sum_gross_accounting'] = $_sum_gross_accounting;

        return $this;
    }

    /**
     * Gets _tax_type
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['_tax_type'];
    }

    /**
     * Sets _tax_type
     * @param string $_tax_type 
     * @return $this
     */
    public function setTaxType($_tax_type)
    {
        $this->container['_tax_type'] = $_tax_type;

        return $this;
    }

    /**
     * Gets _credit_debit
     * @return string
     */
    public function getCreditDebit()
    {
        return $this->container['_credit_debit'];
    }

    /**
     * Sets _credit_debit
     * @param string $_credit_debit 
     * @return $this
     */
    public function setCreditDebit($_credit_debit)
    {
        $this->container['_credit_debit'] = $_credit_debit;

        return $this;
    }

    /**
     * Gets _hidden
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['_hidden'];
    }

    /**
     * Sets _hidden
     * @param bool $_hidden 
     * @return $this
     */
    public function setHidden($_hidden)
    {
        $this->container['_hidden'] = $_hidden;

        return $this;
    }

    /**
     * Gets _cost_centre
     * @return \flagbit\sevdesk\phpclient\Model\ModelCostCentre
     */
    public function getCostCentre()
    {
        return $this->container['_cost_centre'];
    }

    /**
     * Sets _cost_centre
     * @param \flagbit\sevdesk\phpclient\Model\ModelCostCentre $_cost_centre
     * @return $this
     */
    public function setCostCentre($_cost_centre)
    {
        $this->container['_cost_centre'] = $_cost_centre;

        return $this;
    }

    /**
     * Gets _origin
     * @return object
     */
    public function getOrigin()
    {
        return $this->container['_origin'];
    }

    /**
     * Sets _origin
     * @param object $_origin 
     * @return $this
     */
    public function setOrigin($_origin)
    {
        $this->container['_origin'] = $_origin;

        return $this;
    }

    /**
     * Gets _voucher_type
     * @return string
     */
    public function getVoucherType()
    {
        return $this->container['_voucher_type'];
    }

    /**
     * Sets _voucher_type
     * @param string $_voucher_type 
     * @return $this
     */
    public function setVoucherType($_voucher_type)
    {
        $this->container['_voucher_type'] = $_voucher_type;

        return $this;
    }

    /**
     * Gets _recurring_intervall
     * @return int
     */
    public function getRecurringIntervall()
    {
        return $this->container['_recurring_intervall'];
    }

    /**
     * Sets _recurring_intervall
     * @param int $_recurring_intervall 
     * @return $this
     */
    public function setRecurringIntervall($_recurring_intervall)
    {
        $this->container['_recurring_intervall'] = $_recurring_intervall;

        return $this;
    }

    /**
     * Gets _recurring_start_date
     * @return \DateTime
     */
    public function getRecurringStartDate()
    {
        return $this->container['_recurring_start_date'];
    }

    /**
     * Sets _recurring_start_date
     * @param \DateTime $_recurring_start_date 
     * @return $this
     */
    public function setRecurringStartDate($_recurring_start_date)
    {
        $this->container['_recurring_start_date'] = $_recurring_start_date;

        return $this;
    }

    /**
     * Gets _recurring_next_voucher
     * @return \DateTime
     */
    public function getRecurringNextVoucher()
    {
        return $this->container['_recurring_next_voucher'];
    }

    /**
     * Sets _recurring_next_voucher
     * @param \DateTime $_recurring_next_voucher 
     * @return $this
     */
    public function setRecurringNextVoucher($_recurring_next_voucher)
    {
        $this->container['_recurring_next_voucher'] = $_recurring_next_voucher;

        return $this;
    }

    /**
     * Gets _recurring_last_voucher
     * @return \DateTime
     */
    public function getRecurringLastVoucher()
    {
        return $this->container['_recurring_last_voucher'];
    }

    /**
     * Sets _recurring_last_voucher
     * @param \DateTime $_recurring_last_voucher 
     * @return $this
     */
    public function setRecurringLastVoucher($_recurring_last_voucher)
    {
        $this->container['_recurring_last_voucher'] = $_recurring_last_voucher;

        return $this;
    }

    /**
     * Gets _recurring_end_date
     * @return \DateTime
     */
    public function getRecurringEndDate()
    {
        return $this->container['_recurring_end_date'];
    }

    /**
     * Sets _recurring_end_date
     * @param \DateTime $_recurring_end_date 
     * @return $this
     */
    public function setRecurringEndDate($_recurring_end_date)
    {
        $this->container['_recurring_end_date'] = $_recurring_end_date;

        return $this;
    }

    /**
     * Gets _enshrined
     * @return bool
     */
    public function getEnshrined()
    {
        return $this->container['_enshrined'];
    }

    /**
     * Sets _enshrined
     * @param bool $_enshrined 
     * @return $this
     */
    public function setEnshrined($_enshrined)
    {
        $this->container['_enshrined'] = $_enshrined;

        return $this;
    }

    /**
     * Gets _in_source
     * @return string
     */
    public function getInSource()
    {
        return $this->container['_in_source'];
    }

    /**
     * Sets _in_source
     * @param string $_in_source 
     * @return $this
     */
    public function setInSource($_in_source)
    {
        $this->container['_in_source'] = $_in_source;

        return $this;
    }

    /**
     * Gets _tax_set
     * @return \flagbit\sevdesk\phpclient\Model\ModelTaxSet
     */
    public function getTaxSet()
    {
        return $this->container['_tax_set'];
    }

    /**
     * Sets _tax_set
     * @param \flagbit\sevdesk\phpclient\Model\ModelTaxSet $_tax_set
     * @return $this
     */
    public function setTaxSet($_tax_set)
    {
        $this->container['_tax_set'] = $_tax_set;

        return $this;
    }

    /**
     * Gets _iban
     * @return string
     */
    public function getIban()
    {
        return $this->container['_iban'];
    }

    /**
     * Sets _iban
     * @param string $_iban 
     * @return $this
     */
    public function setIban($_iban)
    {
        $this->container['_iban'] = $_iban;

        return $this;
    }

    /**
     * Gets _accounting_special_case
     * @return string
     */
    public function getAccountingSpecialCase()
    {
        return $this->container['_accounting_special_case'];
    }

    /**
     * Sets _accounting_special_case
     * @param string $_accounting_special_case 
     * @return $this
     */
    public function setAccountingSpecialCase($_accounting_special_case)
    {
        $this->container['_accounting_special_case'] = $_accounting_special_case;

        return $this;
    }

    /**
     * Gets _payment_deadline
     * @return \DateTime
     */
    public function getPaymentDeadline()
    {
        return $this->container['_payment_deadline'];
    }

    /**
     * Sets _payment_deadline
     * @param \DateTime $_payment_deadline 
     * @return $this
     */
    public function setPaymentDeadline($_payment_deadline)
    {
        $this->container['_payment_deadline'] = $_payment_deadline;

        return $this;
    }

    /**
     * Gets _tip
     * @return float
     */
    public function getTip()
    {
        return $this->container['_tip'];
    }

    /**
     * Sets _tip
     * @param float $_tip 
     * @return $this
     */
    public function setTip($_tip)
    {
        $this->container['_tip'] = $_tip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\flagbit\sevdesk\phpclient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\flagbit\sevdesk\phpclient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


